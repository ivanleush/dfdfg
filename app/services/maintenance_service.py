import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from dataclasses import dataclass

from app.config import settings
from app.external.remnawave_api import RemnaWaveAPI, test_api_connection
from app.utils.cache import cache

logger = logging.getLogger(__name__)


@dataclass
class MaintenanceStatus:
    is_active: bool
    enabled_at: Optional[datetime] = None
    last_check: Optional[datetime] = None
    reason: Optional[str] = None
    auto_enabled: bool = False
    api_status: bool = True
    consecutive_failures: int = 0


class MaintenanceService:
    
    def __init__(self):
        self._status = MaintenanceStatus(is_active=False)
        self._check_task: Optional[asyncio.Task] = None
        self._is_checking = False
        self._max_consecutive_failures = 3
        self._bot = None 
        self._last_notification_sent = None 
        
    def set_bot(self, bot):
        self._bot = bot
        logger.info("–ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è maintenance_service")
    
    @property
    def status(self) -> MaintenanceStatus:
        return self._status
    
    def is_maintenance_active(self) -> bool:
        return self._status.is_active
    
    def get_maintenance_message(self) -> str:
        if self._status.auto_enabled:
            return f"""
üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã!

–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä–∞–º.

‚è∞ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self._status.last_check.strftime('%H:%M:%S') if self._status.last_check else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
"""
        else:
            return settings.get_maintenance_message()
    
    async def _send_admin_notification(self, message: str, alert_type: str = "info"):
        if not self._bot:
            logger.warning("–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            return False
        
        try:
            from app.services.admin_notification_service import AdminNotificationService
            
            notification_service = AdminNotificationService(self._bot)
            
            if not notification_service._is_enabled():
                logger.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return False
            
            emoji_map = {
                "error": "üö®",
                "warning": "‚ö†Ô∏è", 
                "success": "‚úÖ",
                "info": "‚ÑπÔ∏è"
            }
            emoji = emoji_map.get(alert_type, "‚ÑπÔ∏è")
            
            formatted_message = f"{emoji} <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –†–ê–ë–û–¢–´</b>\n\n{message}\n\n‚è∞ <i>{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</i>"
            
            return await notification_service._send_message(formatted_message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ AdminNotificationService: {e}")
            return False
    
    async def _notify_admins(self, message: str, alert_type: str = "info"):
        if not self._bot:
            logger.warning("–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            return
        
        notification_sent = await self._send_admin_notification(message, alert_type)
        
        if notification_sent:
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ AdminNotificationService")
            return
        
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        
        cache_key = f"maintenance_notification_{alert_type}"
        if await cache.get(cache_key):
            return
        
        admin_ids = settings.get_admin_ids()
        if not admin_ids:
            logger.warning("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
            return
        
        emoji_map = {
            "error": "üö®",
            "warning": "‚ö†Ô∏è", 
            "success": "‚úÖ",
            "info": "‚ÑπÔ∏è"
        }
        emoji = emoji_map.get(alert_type, "‚ÑπÔ∏è")
        
        formatted_message = f"{emoji} <b>Maintenance Service</b>\n\n{message}"
        
        success_count = 0
        for admin_id in admin_ids:
            try:
                await self._bot.send_message(
                    chat_id=admin_id,
                    text=formatted_message,
                    parse_mode="HTML"
                )
                success_count += 1
                await asyncio.sleep(0.1) 
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        if success_count > 0:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            await cache.set(cache_key, True, expire=300)
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    
    async def enable_maintenance(self, reason: Optional[str] = None, auto: bool = False) -> bool:
        try:
            if self._status.is_active:
                logger.warning("–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç —É–∂–µ –≤–∫–ª—é—á–µ–Ω")
                return True
            
            self._status.is_active = True
            self._status.enabled_at = datetime.utcnow()
            self._status.reason = reason or ("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ" if auto else "–í–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            self._status.auto_enabled = auto
            
            await self._save_status_to_cache()
            
            notification_msg = f"""–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –í–ö–õ–Æ–ß–ï–ù

üìã <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {self._status.reason}
ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</b> {'–î–∞' if auto else '–ù–µ—Ç'}
üïê <b>–í—Ä–µ–º—è:</b> {self._status.enabled_at.strftime('%d.%m.%Y %H:%M:%S')}

–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Å–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."""
            
            await self._notify_admins(notification_msg, "warning" if auto else "info")
            
            logger.warning(f"üîß –†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –í–ö–õ–Æ–ß–ï–ù. –ü—Ä–∏—á–∏–Ω–∞: {self._status.reason}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç: {e}")
            return False
    
    async def disable_maintenance(self) -> bool:
        try:
            if not self._status.is_active:
                logger.info("–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω")
                return True
            
            was_auto = self._status.auto_enabled
            duration = None
            if self._status.enabled_at:
                duration = datetime.utcnow() - self._status.enabled_at
            
            self._status.is_active = False
            self._status.enabled_at = None
            self._status.reason = None
            self._status.auto_enabled = False
            self._status.consecutive_failures = 0
            
            await self._save_status_to_cache()
            
            duration_str = ""
            if duration:
                hours = int(duration.total_seconds() // 3600)
                minutes = int((duration.total_seconds() % 3600) // 60)
                if hours > 0:
                    duration_str = f"\n‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {hours}—á {minutes}–º–∏–Ω"
                else:
                    duration_str = f"\n‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {minutes}–º–∏–Ω"
            
            notification_msg = f"""–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –í–´–ö–õ–Æ–ß–ï–ù

ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</b> {'–î–∞' if was_auto else '–ù–µ—Ç'}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')}
{duration_str}

–°–µ—Ä–≤–∏—Å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
            
            await self._notify_admins(notification_msg, "success")
            
            logger.info("‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –í–´–ö–õ–Æ–ß–ï–ù")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç: {e}")
            return False
    
    async def start_monitoring(self) -> bool:
        try:
            if self._check_task and not self._check_task.done():
                logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            await self._load_status_from_cache()
            
            self._check_task = asyncio.create_task(self._monitoring_loop())
            logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API Remnawave (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {settings.get_maintenance_check_interval()}—Å)")
            
            await self._notify_admins(f"""–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –∑–∞–ø—É—â–µ–Ω

üîÑ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {settings.get_maintenance_check_interval()} —Å–µ–∫—É–Ω–¥
ü§ñ <b>–ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ:</b> {'–í–∫–ª—é—á–µ–Ω–æ' if settings.is_maintenance_auto_enable() else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
üéØ <b>–ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫:</b> {self._max_consecutive_failures}

–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é API.""", "info")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    async def stop_monitoring(self) -> bool:
        try:
            if self._check_task and not self._check_task.done():
                self._check_task.cancel()
                try:
                    await self._check_task
                except asyncio.CancelledError:
                    pass
            
            await self._notify_admins("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "info")
            logger.info("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    async def check_api_status(self) -> bool:
        try:
            if self._is_checking:
                return self._status.api_status
            
            self._is_checking = True
            self._status.last_check = datetime.utcnow()
            
            api = RemnaWaveAPI(settings.REMNAWAVE_API_URL, settings.REMNAWAVE_API_KEY)
            
            async with api:
                is_connected = await test_api_connection(api)
                
                if is_connected:
                    if not self._status.api_status:
                        await self._notify_admins(f"""API Remnawave –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –î–æ—Å—Ç—É–ø–Ω–æ
üïê <b>–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {self._status.last_check.strftime('%H:%M:%S')}
üîÑ <b>–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –±—ã–ª–æ:</b> {self._status.consecutive_failures}

API —Å–Ω–æ–≤–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã.""", "success")
                    
                    self._status.api_status = True
                    self._status.consecutive_failures = 0
                    
                    if self._status.is_active and self._status.auto_enabled:
                        await self.disable_maintenance()
                        logger.info("‚úÖ API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, —Ä–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
                    
                    return True
                else:
                    was_available = self._status.api_status
                    self._status.api_status = False
                    self._status.consecutive_failures += 1
                    
                    if was_available:
                        await self._notify_admins(f"""API Remnawave –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!

‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
üïê <b>–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</b> {self._status.last_check.strftime('%H:%M:%S')}
üîÑ <b>–ü–æ–ø—ã—Ç–∫–∞:</b> {self._status.consecutive_failures}

–ù–∞—á–∞–ª–∞—Å—å —Å–µ—Ä–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ API.""", "error")
                    
                    if (self._status.consecutive_failures >= self._max_consecutive_failures and
                        not self._status.is_active and
                        settings.is_maintenance_auto_enable()):
                        
                        await self.enable_maintenance(
                            reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ {self._status.consecutive_failures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ API",
                            auto=True
                        )
                    
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
            
            if self._status.api_status:
                await self._notify_admins(f"""–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API Remnawave

‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.utcnow().strftime('%H:%M:%S')}

–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API.""", "error")
            
            self._status.api_status = False
            self._status.consecutive_failures += 1
            return False
        finally:
            self._is_checking = False
            await self._save_status_to_cache()
    
    async def _monitoring_loop(self):
        while True:
            try:
                await self.check_api_status()
                await asyncio.sleep(settings.get_maintenance_check_interval())
                
            except asyncio.CancelledError:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(30) 
    
    async def _save_status_to_cache(self):
        try:
            status_data = {
                "is_active": self._status.is_active,
                "enabled_at": self._status.enabled_at.isoformat() if self._status.enabled_at else None,
                "reason": self._status.reason,
                "auto_enabled": self._status.auto_enabled,
                "consecutive_failures": self._status.consecutive_failures,
                "last_check": self._status.last_check.isoformat() if self._status.last_check else None
            }
            
            await cache.set("maintenance_status", status_data, expire=3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∫–µ—à: {e}")
    
    async def _load_status_from_cache(self):
        try:
            status_data = await cache.get("maintenance_status")
            if not status_data:
                return
            
            self._status.is_active = status_data.get("is_active", False)
            self._status.reason = status_data.get("reason")
            self._status.auto_enabled = status_data.get("auto_enabled", False)
            self._status.consecutive_failures = status_data.get("consecutive_failures", 0)
            
            if status_data.get("enabled_at"):
                self._status.enabled_at = datetime.fromisoformat(status_data["enabled_at"])
            
            if status_data.get("last_check"):
                self._status.last_check = datetime.fromisoformat(status_data["last_check"])
            
            logger.info(f"üî• –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö—Ä–∞–±–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫–µ—à–∞: –∞–∫—Ç–∏–≤–µ–Ω={self._status.is_active}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –∫–µ—à–∞: {e}")
    
    def get_status_info(self) -> Dict[str, Any]:
        return {
            "is_active": self._status.is_active,
            "enabled_at": self._status.enabled_at,
            "last_check": self._status.last_check,
            "reason": self._status.reason,
            "auto_enabled": self._status.auto_enabled,
            "api_status": self._status.api_status,
            "consecutive_failures": self._status.consecutive_failures,
            "monitoring_active": self._check_task is not None and not self._check_task.done(),
            "auto_enable_configured": settings.is_maintenance_auto_enable(),
            "check_interval": settings.get_maintenance_check_interval(),
            "bot_connected": self._bot is not None
        }
    
    async def force_api_check(self) -> Dict[str, Any]:
        start_time = datetime.utcnow()
        
        try:
            api_status = await self.check_api_status()
            end_time = datetime.utcnow()
            response_time = (end_time - start_time).total_seconds()
            
            return {
                "success": True,
                "api_available": api_status,
                "response_time": round(response_time, 2),
                "checked_at": end_time,
                "consecutive_failures": self._status.consecutive_failures
            }
            
        except Exception as e:
            end_time = datetime.utcnow()
            response_time = (end_time - start_time).total_seconds()
            
            return {
                "success": False,
                "api_available": False,
                "error": str(e),
                "response_time": round(response_time, 2),
                "checked_at": end_time,
                "consecutive_failures": self._status.consecutive_failures
            }
    
    async def send_remnawave_status_notification(self, status: str, details: str = "") -> bool:
        try:
            status_emojis = {
                "online": "üü¢",
                "offline": "üî¥", 
                "warning": "üü°",
                "error": "‚ö†Ô∏è"
            }
            
            emoji = status_emojis.get(status, "‚ÑπÔ∏è")
            
            message = f"""–°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª–∏ Remnawave –∏–∑–º–µ–Ω–∏–ª—Å—è

{emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status.upper()}
üîó <b>URL:</b> {settings.REMNAWAVE_API_URL}
{details}"""
            
            alert_type = "error" if status in ["offline", "error"] else "info"
            await self._notify_admins(message, alert_type)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ Remnawave: {status}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ Remnawave: {e}")
            return False


maintenance_service = MaintenanceService()
