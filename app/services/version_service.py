import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any
from pathlib import Path
from packaging import version

from app.config import settings

logger = logging.getLogger(__name__)


class VersionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—Å–∏—è–º–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.current_version = self.get_current_version()
        self.latest_version: Optional[str] = None
        self.update_available = False
        self.changelog: Optional[str] = None
        
    def get_current_version(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
        try:
            version_file = Path("VERSION")
            if version_file.exists():
                return version_file.read_text().strip()
            else:
                # Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ git
                return self._get_version_from_git()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
            return "unknown"
    
    def _get_version_from_git(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ git —Ç–µ–≥–æ–≤"""
        try:
            import subprocess
            result = subprocess.run(
                ["git", "describe", "--tags", "--abbrev=0"],
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.returncode == 0:
                return result.stdout.strip()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ git: {e}")
        return "dev"
    
    async def check_for_updates(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if not settings.VERSION_CHECK_ENABLED:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞
            repo_url = f"https://api.github.com/repos/{settings.VERSION_CHECK_REPO}/releases/latest"
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {settings.VERSION_CHECK_REPO}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    repo_url,
                    timeout=10
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        self.latest_version = data.get("tag_name", "").lstrip("v")
                        self.changelog = data.get("body", "")
                        
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
                        if self.latest_version and self.current_version != "unknown":
                            try:
                                current = version.parse(self.current_version)
                                latest = version.parse(self.latest_version)
                                self.update_available = latest > current
                                
                                if self.update_available:
                                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.current_version} -> {self.latest_version}")
                                else:
                                    logger.info(f"–í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: {self.current_version}")
                                    
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π: {e}")
                                self.update_available = False
                        
                        return self.update_available
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    def get_version_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"""
        return {
            "current_version": self.current_version,
            "latest_version": self.latest_version,
            "update_available": self.update_available,
            "changelog": self.changelog
        }
    
    def get_version_display(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤–µ—Ä—Å–∏–∏"""
        if self.update_available and self.latest_version:
            return f"v{self.current_version} ‚Üí v{self.latest_version} üîÑ"
        else:
            return f"v{self.current_version} ‚úÖ"
    
    async def start_version_monitoring(self, interval_hours: int = 24):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ—Ä—Å–∏–π"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–µ—Ä—Å–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_hours}—á)")
        
        while True:
            try:
                await self.check_for_updates()
                await asyncio.sleep(interval_hours * 3600)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –≤–µ—Ä—Å–∏–π: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
version_service = VersionService()
