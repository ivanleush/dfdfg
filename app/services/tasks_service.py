import logging
from typing import List
from aiogram import Bot, Router, types, F
from aiogram.enums import ChatMemberStatus
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
import html # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML

from app.database.crud.tasks import get_active_tasks, check_task_completion, complete_task, get_task_by_id
from app.database.crud.user import add_user_balance
from app.database.models import User, Task
from app.localization.texts import get_texts

logger = logging.getLogger(__name__)
router = Router()


class TasksService:
    async def get_available_tasks_text(self, db: AsyncSession, user_id: int) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""
        texts = get_texts('ru')
        active_tasks = await get_active_tasks(db)

        task_list_text = texts.TASKS_MENU_TITLE + "\n\n"

        for task in active_tasks:
            is_completed = await check_task_completion(db, user_id, task.id)
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_completed else "üî¥ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–ö–∞–Ω–∞–ª 1", "–ö–∞–Ω–∞–ª 2" –∏ —Ç.–¥.
            channels_list = ", ".join(
                f"<a href='{html.escape(c.url)}'>–ö–∞–Ω–∞–ª {i + 1}</a>" for i, c in enumerate(task.channels))

            task_text = texts.TASK_TEMPLATE.format(
                title=html.escape(task.title),
                description=html.escape(task.description),
                reward_rubles=task.reward_kopeks / 100,
                channels_list=channels_list
            )
            task_list_text += f"‚ñ™Ô∏è {task_text}\n\n"

        return task_list_text

    async def check_subscription_and_reward(self, bot: Bot, db: AsyncSession, user: User, task: Task) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É."""
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç–∞–º TaskChannel
        for channel in task.channels:
            try:
                member = await bot.get_chat_member(chat_id=channel.channel_id, user_id=user.telegram_id)
                if member.status not in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR,
                                         ChatMemberStatus.CREATOR]:
                    return False
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª {channel.name}: {e}")
                return False

        await add_user_balance(db, user, task.reward_kopeks, f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {task.title}")
        await complete_task(db, user.telegram_id, task.id)

        return True


# –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
@router.callback_query(F.data == "tasks")
async def show_tasks(call: types.CallbackQuery, db: AsyncSession):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""
    tasks_service = TasksService()
    active_tasks = await get_active_tasks(db)
    user_id = call.from_user.id

    keyboard = InlineKeyboardBuilder()

    if active_tasks:
        for task in active_tasks:
            is_completed = await check_task_completion(db, user_id, task.id)
            if is_completed:
                button_text = f"‚úÖ {html.escape(task.title)}"
            else:
                button_text = f"{html.escape(task.title)} ({task.reward_kopeks / 100}‚ÇΩ)"

            keyboard.row(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"show_task_{task.id}"
            ))
    else:
        await call.message.edit_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        await call.answer()
        return

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="menu"))

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=keyboard.as_markup()
    )
    await call.answer()


@router.callback_query(F.data.startswith("check_task_"))
async def check_task_completion_handler(call: types.CallbackQuery, bot: Bot, db: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—ã–¥–∞–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.
    """
    task_id = int(call.data.split('_')[2])
    task = await get_task_by_id(db, task_id)
    user_id = call.from_user.id

    if not task:
        await call.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    if await check_task_completion(db, user_id, task_id):
        await call.answer("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!", show_alert=True)
        return

    tasks_service = TasksService()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –≤ CRUD)
    user = User(telegram_id=user_id)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º
    success = await tasks_service.check_subscription_and_reward(bot, db, user, task)

    if success:
        success_text = (
            f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ {task.reward_kopeks / 100}‚ÇΩ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å."
        )
        await call.message.edit_text(success_text, parse_mode='HTML')
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        channels_text = ""
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç–∞–º TaskChannel
        if task.channels:
            for channel in task.channels:
                channels_text += f'<a href="{html.escape(channel.url)}">{html.escape(channel.name)}</a>\n'

        error_text = (
            "‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n"
            f"{channels_text}"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.row(types.InlineKeyboardButton(
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚úÖ",
            callback_data=f"check_task_{task_id}"
        ))
        keyboard.row(types.InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="tasks"
        ))

        await call.message.edit_text(
            error_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )

    await call.answer()