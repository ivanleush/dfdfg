import random
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional
from aiogram import types
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.crud.user import add_user_balance, get_user_by_telegram_id
from app.database.crud.fortune_wheel import (
    create_fortune_wheel_spin,
    get_last_spin_time,
    get_fortune_wheel_stats,
    get_user_total_winnings
)
from app.config import settings
from app.localization.texts import get_texts

logger = logging.getLogger(__name__)


class FortuneWheelService:
    async def spin_wheel(
            self,
            db: AsyncSession,
            user: types.User,
            message: types.Message
    ) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏–Ω –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∫—Ä—É—Ç–∏–ª –∫–æ–ª–µ—Å–æ
        last_spin = await get_last_spin_time(db, user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏–Ω–∞
        if last_spin and last_spin > datetime.utcnow() - timedelta(hours=24):
            time_left = last_spin + timedelta(hours=24) - datetime.utcnow()
            hours = time_left.seconds // 3600
            minutes = (time_left.seconds % 3600) // 60

            return {
                "success": False,
                "message": f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
            }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
        animation_message = await message.answer("üé° –ö–æ–ª–µ—Å–æ –≤—Ä–∞—â–∞–µ—Ç—Å—è...")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
        await asyncio.sleep(2)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try-except –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        try:
            await animation_message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        win_amount = self._get_random_win_amount()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        spin = await create_fortune_wheel_spin(
            db,
            user_id=user.id,
            amount_kopeks=win_amount,
            is_win=win_amount > 0
        )

        # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if win_amount > 0:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user_db = await get_user_by_telegram_id(db, user.id)
            if user_db:
                await add_user_balance(
                    db,
                    user_db,
                    win_amount,
                    f"–í—ã–∏–≥—Ä—ã—à –≤ –∫–æ–ª–µ—Å–µ —Ñ–æ—Ä—Ç—É–Ω—ã #{spin.id}"
                )
            else:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã–∏–≥—Ä—ã—à–∞.")

        win_text = self._get_win_text(win_amount)

        return {
            "success": True,
            "amount": win_amount,
            "message": win_text
        }

    def _get_random_win_amount(self) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π.
        –í—ã–∏–≥—Ä—ã—à –≤ –∫–æ–ø–µ–π–∫–∞—Ö.
        """
        outcomes = settings.FORTUNE_WHEEL_OUTCOMES
        weights = [outcome['weight'] for outcome in outcomes]

        selected_outcome = random.choices(outcomes, weights=weights, k=1)[0]

        min_amount = selected_outcome['min_amount_kopeks']
        max_amount = selected_outcome['max_amount_kopeks']

        return random.randint(min_amount, max_amount)

    def _get_win_text(self, amount_kopeks: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ.
        """
        texts = get_texts('ru')  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        rubles = amount_kopeks / 100

        if amount_kopeks == 0:
            return texts.FORTUNE_WHEEL_LOSE

        return random.choice(texts.FORTUNE_WHEEL_WIN.split(" | ")).format(rubles=rubles)

    async def get_stats(self, db: AsyncSession, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        stats = await get_fortune_wheel_stats(db, user_id)
        total_winnings = await get_user_total_winnings(db, user_id)

        return {
            "total_spins": stats.total_spins if stats else 0,
            "wins": stats.wins if stats else 0,
            "total_winnings": total_winnings if total_winnings else 0
        }