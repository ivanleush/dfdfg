import logging
from datetime import datetime, timedelta
from aiogram import Dispatcher, types, F
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.admin import get_admin_statistics_keyboard, get_period_selection_keyboard
from app.localization.texts import get_texts
from app.services.user_service import UserService
from app.database.crud.subscription import get_subscriptions_statistics
from app.database.crud.transaction import get_transactions_statistics, get_revenue_by_period
from app.database.crud.referral import get_referral_statistics
from app.utils.decorators import admin_required, error_handler
from app.utils.formatters import format_datetime, format_percentage

logger = logging.getLogger(__name__)


@admin_required
@error_handler
async def show_statistics_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    text = """
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_statistics_keyboard(db_user.language)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_users_statistics(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    user_service = UserService()
    stats = await user_service.get_user_statistics(db)
    
    total_users = stats['total_users']
    active_rate = format_percentage(stats['active_users'] / total_users * 100 if total_users > 0 else 0)
    
    current_time = format_datetime(datetime.utcnow())
    
    text = f"""
üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
- –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']} ({active_rate})
- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked_users']}

<b>–ù–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>
- –°–µ–≥–æ–¥–Ω—è: {stats['new_today']}
- –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}
- –ó–∞ –º–µ—Å—è—Ü: {stats['new_month']}

<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {active_rate}
- –†–æ—Å—Ç –∑–∞ –º–µ—Å—è—Ü: +{stats['new_month']} ({format_percentage(stats['new_month'] / total_users * 100 if total_users > 0 else 0)})

<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {current_time}
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats_users")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_statistics")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
    
    await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")



@admin_required
@error_handler
async def show_subscriptions_statistics(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    stats = await get_subscriptions_statistics(db)
    
    total_subs = stats['total_subscriptions']
    conversion_rate = format_percentage(stats['paid_subscriptions'] / total_subs * 100 if total_subs > 0 else 0)
    current_time = format_datetime(datetime.utcnow())
    
    text = f"""
üì± <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>

<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
- –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {stats['total_subscriptions']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_subscriptions']}
- –ü–ª–∞—Ç–Ω—ã—Ö: {stats['paid_subscriptions']}
- –¢—Ä–∏–∞–ª—å–Ω—ã—Ö: {stats['trial_subscriptions']}

<b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
- –ò–∑ —Ç—Ä–∏–∞–ª–∞ –≤ –ø–ª–∞—Ç–Ω—É—é: {conversion_rate}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–Ω—ã—Ö: {stats['paid_subscriptions']}

<b>–ü—Ä–æ–¥–∞–∂–∏:</b>
- –°–µ–≥–æ–¥–Ω—è: {stats['purchased_today']}
- –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['purchased_week']}
- –ó–∞ –º–µ—Å—è—Ü: {stats['purchased_month']}

<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {current_time}
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats_subs")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_statistics")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@admin_required
@error_handler
async def show_revenue_statistics(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    now = datetime.utcnow()
    month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    month_stats = await get_transactions_statistics(db, month_start, now)
    all_time_stats = await get_transactions_statistics(db)
    current_time = format_datetime(datetime.utcnow())
    
    text = f"""
üí∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤</b>

<b>–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>
- –î–æ—Ö–æ–¥—ã: {settings.format_price(month_stats['totals']['income_kopeks'])}
- –†–∞—Å—Ö–æ–¥—ã: {settings.format_price(month_stats['totals']['expenses_kopeks'])}
- –ü—Ä–∏–±—ã–ª—å: {settings.format_price(month_stats['totals']['profit_kopeks'])}
- –û—Ç –ø–æ–¥–ø–∏—Å–æ–∫: {settings.format_price(month_stats['totals']['subscription_income_kopeks'])}

<b>–°–µ–≥–æ–¥–Ω—è:</b>
- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {month_stats['today']['transactions_count']}
- –î–æ—Ö–æ–¥—ã: {settings.format_price(month_stats['today']['income_kopeks'])}

<b>–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>
- –û–±—â–∏–π –¥–æ—Ö–æ–¥: {settings.format_price(all_time_stats['totals']['income_kopeks'])}
- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {settings.format_price(all_time_stats['totals']['profit_kopeks'])}

<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
"""
    
    for method, data in month_stats['by_payment_method'].items():
        if method and data['count'] > 0:
            text += f"‚Ä¢ {method}: {data['count']} ({settings.format_price(data['amount'])})\n"
    
    text += f"\n<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {current_time}"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
      # [types.InlineKeyboardButton(text="üìà –ü–µ—Ä–∏–æ–¥", callback_data="admin_revenue_period")],
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats_revenue")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_statistics")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@admin_required
@error_handler
async def show_referral_statistics(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    stats = await get_referral_statistics(db)
    current_time = format_datetime(datetime.utcnow())
    
    avg_per_referrer = 0
    if stats['active_referrers'] > 0:
        avg_per_referrer = stats['total_paid_kopeks'] / stats['active_referrers']
    
    text = f"""
ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {stats['users_with_referrals']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: {stats['active_referrers']}
- –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {settings.format_price(stats['total_paid_kopeks'])}

<b>–ó–∞ –ø–µ—Ä–∏–æ–¥:</b>
- –°–µ–≥–æ–¥–Ω—è: {settings.format_price(stats['today_earnings_kopeks'])}
- –ó–∞ –Ω–µ–¥–µ–ª—é: {settings.format_price(stats['week_earnings_kopeks'])}
- –ó–∞ –º–µ—Å—è—Ü: {settings.format_price(stats['month_earnings_kopeks'])}

<b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
- –ù–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ—Ä–µ—Ä–µ—Ä–∞: {settings.format_price(int(avg_per_referrer))}

<b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ã:</b>
"""
    
    if stats['top_referrers']:
        for i, referrer in enumerate(stats['top_referrers'][:5], 1):
            name = referrer['display_name']
            earned = settings.format_price(referrer['total_earned_kopeks'])
            count = referrer['referrals_count']
            text += f"{i}. {name}: {earned} ({count} —Ä–µ—Ñ.)\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤"
    
    text += f"\n<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {current_time}"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats_referrals")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_statistics")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@admin_required
@error_handler
async def show_summary_statistics(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    user_service = UserService()
    user_stats = await user_service.get_user_statistics(db)
    sub_stats = await get_subscriptions_statistics(db)
    
    now = datetime.utcnow()
    month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    revenue_stats = await get_transactions_statistics(db, month_start, now)
    current_time = format_datetime(datetime.utcnow())
    
    conversion_rate = 0
    if user_stats['total_users'] > 0:
        conversion_rate = sub_stats['paid_subscriptions'] / user_stats['total_users'] * 100
    
    arpu = 0
    if user_stats['active_users'] > 0:
        arpu = revenue_stats['totals']['income_kopeks'] / user_stats['active_users']
    
    text = f"""
üìä <b>–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
- –í—Å–µ–≥–æ: {user_stats['total_users']}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active_users']}
- –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {user_stats['new_month']}

<b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {sub_stats['active_subscriptions']}
- –ü–ª–∞—Ç–Ω—ã—Ö: {sub_stats['paid_subscriptions']}
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {format_percentage(conversion_rate)}

<b>–§–∏–Ω–∞–Ω—Å—ã (–º–µ—Å—è—Ü):</b>
- –î–æ—Ö–æ–¥—ã: {settings.format_price(revenue_stats['totals']['income_kopeks'])}
- ARPU: {settings.format_price(int(arpu))}
- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {sum(data['count'] for data in revenue_stats['by_type'].values())}

<b>–†–æ—Å—Ç:</b>
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: +{user_stats['new_month']} –∑–∞ –º–µ—Å—è—Ü
- –ü—Ä–æ–¥–∞–∂–∏: +{sub_stats['purchased_month']} –∑–∞ –º–µ—Å—è—Ü

<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {current_time}
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats_summary")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_statistics")]
    ])
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer("üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@admin_required
@error_handler
async def show_revenue_by_period(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    period = callback.data.split('_')[-1]
    
    period_map = {
        "today": 1,
        "yesterday": 1,
        "week": 7,
        "month": 30,
        "all": 365
    }
    
    days = period_map.get(period, 30)
    revenue_data = await get_revenue_by_period(db, days)
    
    if period == "yesterday":
        yesterday = datetime.utcnow().date() - timedelta(days=1)
        revenue_data = [r for r in revenue_data if r['date'] == yesterday]
    elif period == "today":
        today = datetime.utcnow().date()
        revenue_data = [r for r in revenue_data if r['date'] == today]
    
    total_revenue = sum(r['amount_kopeks'] for r in revenue_data)
    avg_daily = total_revenue / len(revenue_data) if revenue_data else 0
    
    text = f"""
üìà <b>–î–æ—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {period}</b>

<b>–°–≤–æ–¥–∫–∞:</b>
- –û–±—â–∏–π –¥–æ—Ö–æ–¥: {settings.format_price(total_revenue)}
- –î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {len(revenue_data)}
- –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: {settings.format_price(int(avg_daily))}

<b>–ü–æ –¥–Ω—è–º:</b>
"""
    
    for revenue in revenue_data[-10:]:
        text += f"‚Ä¢ {revenue['date'].strftime('%d.%m')}: {settings.format_price(revenue['amount_kopeks'])}\n"
    
    if len(revenue_data) > 10:
        text += f"... –∏ –µ—â–µ {len(revenue_data) - 10} –¥–Ω–µ–π"
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìä –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="admin_revenue_period")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –¥–æ—Ö–æ–¥–∞–º", callback_data="admin_stats_revenue")]
        ])
    )
    await callback.answer()


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(show_statistics_menu, F.data == "admin_statistics")
    dp.callback_query.register(show_users_statistics, F.data == "admin_stats_users")
    dp.callback_query.register(show_subscriptions_statistics, F.data == "admin_stats_subs")
    dp.callback_query.register(show_revenue_statistics, F.data == "admin_stats_revenue")
    dp.callback_query.register(show_referral_statistics, F.data == "admin_stats_referrals")
    dp.callback_query.register(show_summary_statistics, F.data == "admin_stats_summary")
    dp.callback_query.register(show_revenue_by_period, F.data.startswith("period_"))
    
    periods = ["today", "yesterday", "week", "month", "all"]
    for period in periods:
        dp.callback_query.register(
            show_revenue_by_period,
            F.data == f"period_{period}"
        )
