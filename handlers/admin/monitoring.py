import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from app.config import settings
from app.database.database import get_db
from app.services.monitoring_service import monitoring_service
from app.utils.decorators import admin_required
from app.keyboards.admin import get_monitoring_keyboard, get_admin_main_keyboard
from app.localization.texts import get_texts

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "admin_monitoring")
@admin_required
async def admin_monitoring_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        async for db in get_db():
            status = await monitoring_service.get_monitoring_status(db)
            
            running_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status['is_running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            last_update = status['last_update'].strftime('%H:%M:%S') if status['last_update'] else "–ù–∏–∫–æ–≥–¥–∞"
            
            text = f"""
üîç <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {running_status}
üïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {last_update}
‚öôÔ∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {settings.MONITORING_INTERVAL} –º–∏–Ω

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {status['stats_24h']['total_events']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {status['stats_24h']['successful']}
‚Ä¢ –û—à–∏–±–æ–∫: {status['stats_24h']['failed']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {status['stats_24h']['success_rate']}%

üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            
            keyboard = get_monitoring_keyboard()
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "admin_mon_start")
@admin_required
async def start_monitoring_callback(callback: CallbackQuery):
    try:
        if monitoring_service.is_running:
            await callback.answer("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        if not monitoring_service.bot:
            monitoring_service.bot = callback.bot
        
        asyncio.create_task(monitoring_service.start_monitoring())
        
        await callback.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
        
        await admin_monitoring_menu(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_stop")
@admin_required
async def stop_monitoring_callback(callback: CallbackQuery):
    try:
        if not monitoring_service.is_running:
            await callback.answer("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        monitoring_service.stop_monitoring()
        await callback.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        await admin_monitoring_menu(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_force_check")
@admin_required
async def force_check_callback(callback: CallbackQuery):
    try:
        await callback.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        async for db in get_db():
            results = await monitoring_service.force_check_subscriptions(db)
            
            text = f"""
‚úÖ <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {results['expired']}
‚Ä¢ –ò—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {results['expiring']}
‚Ä¢ –ì–æ—Ç–æ–≤—ã—Ö –∫ –∞–≤—Ç–æ–æ–ø–ª–∞—Ç–µ: {results['autopay_ready']}

üïê <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%H:%M:%S')}

–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
            ])
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_logs")
@admin_required
async def monitoring_logs_callback(callback: CallbackQuery):
    try:
        async for db in get_db():
            logs = await monitoring_service.get_monitoring_logs(db, limit=15)
            
            if not logs:
                text = "üìù <b>–õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç—ã</b>\n\n–°–∏—Å—Ç–µ–º–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."
            else:
                text = "üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n\n"
                
                for log in logs:
                    icon = "‚úÖ" if log['is_success'] else "‚ùå"
                    time_str = log['created_at'].strftime('%m-%d %H:%M')
                    event_type = log['event_type'].replace('_', ' ').title()
                    
                    text += f"{icon} <code>{time_str}</code> {event_type}\n"
                    
                    message = log['message']
                    if len(message) > 60:
                        message = message[:60] + "..."
                    
                    text += f"   üìÑ {message}\n\n"
                    
                    if len(text) > 3500:
                        text += "...\n\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–æ–≤.</i>"
                        break
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_mon_logs"),
                    InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_mon_clear_logs")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
            ])
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_clear_logs")
@admin_required
async def clear_logs_callback(callback: CallbackQuery):
    try:
        async for db in get_db():
            deleted_count = await monitoring_service.cleanup_old_logs(db, days=7)
            
            if deleted_count > 0:
                await callback.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤")
            else:
                await callback.answer("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            await monitoring_logs_callback(callback)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_test_notifications")
@admin_required
async def test_notifications_callback(callback: CallbackQuery):
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        test_message = f"""
üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if monitoring_service.is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if settings.ENABLE_NOTIFICATIONS else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}

‚úÖ –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
"""
        
        await callback.bot.send_message(
            callback.from_user.id,
            test_message,
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_statistics")
@admin_required
async def monitoring_statistics_callback(callback: CallbackQuery):
    try:
        async for db in get_db():
            from app.database.crud.subscription import get_subscriptions_statistics
            sub_stats = await get_subscriptions_statistics(db)
            
            mon_status = await monitoring_service.get_monitoring_status(db)
            
            week_ago = datetime.now() - timedelta(days=7)
            week_logs = await monitoring_service.get_monitoring_logs(db, limit=1000)
            week_logs = [log for log in week_logs if log['created_at'] >= week_ago]
            
            week_success = sum(1 for log in week_logs if log['is_success'])
            week_errors = len(week_logs) - week_success
            
            text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üì± <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {sub_stats['total_subscriptions']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {sub_stats['active_subscriptions']}
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã—Ö: {sub_stats['trial_subscriptions']}
‚Ä¢ –ü–ª–∞—Ç–Ω—ã—Ö: {sub_stats['paid_subscriptions']}

üìà <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {mon_status['stats_24h']['successful']}
‚Ä¢ –û—à–∏–±–æ–∫: {mon_status['stats_24h']['failed']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {mon_status['stats_24h']['success_rate']}%

üìä <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(week_logs)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {week_success}
‚Ä¢ –û—à–∏–±–æ–∫: {week_errors}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(week_success/len(week_logs)*100, 1) if week_logs else 0}%

üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings.MONITORING_INTERVAL} –º–∏–Ω
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª' if getattr(settings, 'ENABLE_NOTIFICATIONS', True) else 'üî¥ –í—ã–∫–ª'}
‚Ä¢ –ê–≤—Ç–æ–æ–ø–ª–∞—Ç–∞: {', '.join(map(str, settings.get_autopay_warning_days()))} –¥–Ω–µ–π
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
            ])
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", show_alert=True)


@router.message(Command("monitoring"))
@admin_required
async def monitoring_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /monitoring –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        async for db in get_db():
            status = await monitoring_service.get_monitoring_status(db)
            
            running_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status['is_running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            text = f"""
üîç <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {running_status}
üìà <b>–°–æ–±—ã—Ç–∏—è –∑–∞ 24—á:</b> {status['stats_24h']['total_events']}
‚úÖ <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {status['stats_24h']['success_rate']}%

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
"""
            
            await message.answer(text, parse_mode="HTML")
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /monitoring: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    dp.include_router(router)