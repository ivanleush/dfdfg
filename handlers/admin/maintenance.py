import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.services.maintenance_service import maintenance_service
from app.keyboards.admin import get_maintenance_keyboard, get_admin_main_keyboard
from app.localization.texts import get_texts
from app.utils.decorators import admin_required, error_handler

logger = logging.getLogger(__name__)


class MaintenanceStates(StatesGroup):
    waiting_for_reason = State()
    waiting_for_notification_message = State()


@admin_required
@error_handler
async def show_maintenance_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    texts = get_texts(db_user.language)
    
    status_info = maintenance_service.get_status_info()
    
    try:
        from app.services.remnawave_service import RemnaWaveService
        rw_service = RemnaWaveService()
        panel_status = await rw_service.get_panel_status_summary()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–Ω–µ–ª–∏: {e}")
        panel_status = {"description": "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "has_issues": True}
    
    status_emoji = "üîß" if status_info["is_active"] else "‚úÖ"
    status_text = "–í–∫–ª—é—á–µ–Ω" if status_info["is_active"] else "–í—ã–∫–ª—é—á–µ–Ω"
    
    api_emoji = "‚úÖ" if status_info["api_status"] else "‚ùå"
    api_text = "–î–æ—Å—Ç—É–ø–Ω–æ" if status_info["api_status"] else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    monitoring_emoji = "üîÑ" if status_info["monitoring_active"] else "‚èπÔ∏è"
    monitoring_text = "–ó–∞–ø—É—â–µ–Ω" if status_info["monitoring_active"] else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    enabled_info = ""
    if status_info["is_active"] and status_info["enabled_at"]:
        enabled_time = status_info["enabled_at"].strftime("%d.%m.%Y %H:%M:%S")
        enabled_info = f"\nüìÖ <b>–í–∫–ª—é—á–µ–Ω:</b> {enabled_time}"
        if status_info["reason"]:
            enabled_info += f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {status_info['reason']}"
    
    last_check_info = ""
    if status_info["last_check"]:
        last_check_time = status_info["last_check"].strftime("%H:%M:%S")
        last_check_info = f"\nüïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {last_check_time}"
    
    failures_info = ""
    if status_info["consecutive_failures"] > 0:
        failures_info = f"\n‚ö†Ô∏è <b>–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥:</b> {status_info['consecutive_failures']}"
    
    panel_info = f"\nüåê <b>–ü–∞–Ω–µ–ª—å Remnawave:</b> {panel_status['description']}"
    if panel_status.get("response_time"):
        panel_info += f"\n‚ö° <b>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</b> {panel_status['response_time']}—Å"
    
    message_text = f"""
üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏</b>

{status_emoji} <b>–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç:</b> {status_text}
{api_emoji} <b>API Remnawave:</b> {api_text}
{monitoring_emoji} <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {monitoring_text}
‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {status_info['check_interval']}—Å
ü§ñ <b>–ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ:</b> {'–í–∫–ª—é—á–µ–Ω–æ' if status_info['auto_enable_configured'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
{panel_info}
{enabled_info}
{last_check_info}
{failures_info}

‚ÑπÔ∏è <i>–í —Ä–µ–∂–∏–º–µ —Ç–µ—Ö—Ä–∞–±–æ—Ç –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.</i>
"""
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_maintenance_keyboard(
            db_user.language, 
            status_info["is_active"], 
            status_info["monitoring_active"],
            panel_status.get("has_issues", False)
        )
    )
    await callback.answer()


@admin_required
@error_handler
async def toggle_maintenance_mode(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    is_active = maintenance_service.is_maintenance_active()
    
    if is_active:
        success = await maintenance_service.disable_maintenance()
        if success:
            await callback.answer("–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω", show_alert=True)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç", show_alert=True)
    else:
        await state.set_state(MaintenanceStates.waiting_for_reason)
        await callback.message.edit_text(
            "üîß <b>–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="maintenance_panel")]
            ])
        )
    
    await callback.answer()


@admin_required
@error_handler
async def process_maintenance_reason(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    current_state = await state.get_state()
    
    if current_state != MaintenanceStates.waiting_for_reason:
        return
    
    reason = None
    if message.text and message.text != "/skip":
        reason = message.text[:200] 
    
    success = await maintenance_service.enable_maintenance(reason=reason, auto=False)
    
    if success:
        response_text = "–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤–∫–ª—é—á–µ–Ω"
        if reason:
            response_text += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    else:
        response_text = "–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç"
    
    await message.answer(response_text)
    await state.clear()
    
    status_info = maintenance_service.get_status_info()
    await message.answer(
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞–º–∏:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîß –ü–∞–Ω–µ–ª—å —Ç–µ—Ö—Ä–∞–±–æ—Ç", callback_data="maintenance_panel")]
        ])
    )


@admin_required  
@error_handler
async def toggle_monitoring(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    status_info = maintenance_service.get_status_info()
    
    if status_info["monitoring_active"]:
        success = await maintenance_service.stop_monitoring()
        message = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    else:
        success = await maintenance_service.start_monitoring()
        message = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω" if success else "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    await callback.answer(message, show_alert=True)
    
    await show_maintenance_panel(callback, db_user, db, None)


@admin_required
@error_handler
async def force_api_check(
    callback: types.CallbackQuery,
    db_user: User, 
    db: AsyncSession
):
    await callback.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ API...", show_alert=False)
    
    check_result = await maintenance_service.force_api_check()
    
    if check_result["success"]:
        status_text = "–¥–æ—Å—Ç—É–ø–Ω–æ" if check_result["api_available"] else "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        message = f"API {status_text}\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {check_result['response_time']}—Å"
    else:
        message = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    await callback.message.answer(message)
    
    await show_maintenance_panel(callback, db_user, db, None)


@admin_required
@error_handler
async def check_panel_status(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    await callback.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–Ω–µ–ª–∏...", show_alert=False)
    
    try:
        from app.services.remnawave_service import RemnaWaveService
        rw_service = RemnaWaveService()
        
        status_data = await rw_service.check_panel_health()
        
        status_text = {
            "online": "üü¢ –ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
            "offline": "üî¥ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 
            "degraded": "üü° –ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–±–æ—è–º–∏"
        }.get(status_data["status"], "‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        
        message_parts = [
            f"üåê <b>–°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª–∏ Remnawave</b>\n",
            f"{status_text}",
            f"‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {status_data.get('response_time', 0)}—Å",
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {status_data.get('users_online', 0)}",
            f"üñ•Ô∏è –ù–æ–¥ –æ–Ω–ª–∞–π–Ω: {status_data.get('nodes_online', 0)}/{status_data.get('total_nodes', 0)}"
        ]
        
        if status_data.get("api_error"):
            message_parts.append(f"‚ùå –û—à–∏–±–∫–∞: {status_data['api_error'][:100]}")
        
        message = "\n".join(message_parts)
        
        await callback.message.answer(message, parse_mode="HTML")
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


@admin_required
@error_handler
async def send_manual_notification(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    await state.set_state(MaintenanceStates.waiting_for_notification_message)
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üü¢ –û–Ω–ª–∞–π–Ω", callback_data="manual_notify_online"),
            types.InlineKeyboardButton(text="üî¥ –û—Ñ–ª–∞–π–Ω", callback_data="manual_notify_offline")
        ],
        [
            types.InlineKeyboardButton(text="üü° –ü—Ä–æ–±–ª–µ–º—ã", callback_data="manual_notify_degraded"),
            types.InlineKeyboardButton(text="üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data="manual_notify_maintenance")
        ],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="maintenance_panel")]
    ])
    
    await callback.message.edit_text(
        "üì¢ <b>–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


@admin_required
@error_handler
async def handle_manual_notification(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    status_map = {
        "manual_notify_online": "online",
        "manual_notify_offline": "offline", 
        "manual_notify_degraded": "degraded",
        "manual_notify_maintenance": "maintenance"
    }
    
    status = status_map.get(callback.data)
    if not status:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        return
    
    await state.update_data(notification_status=status)
    
    status_names = {
        "online": "üü¢ –û–Ω–ª–∞–π–Ω",
        "offline": "üî¥ –û—Ñ–ª–∞–π–Ω",
        "degraded": "üü° –ü—Ä–æ–±–ª–µ–º—ã", 
        "maintenance": "üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
    }
    
    await callback.message.edit_text(
        f"üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status_names[status]}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="maintenance_panel")]
        ])
    )


@admin_required
@error_handler
async def process_notification_message(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    current_state = await state.get_state()
    
    if current_state != MaintenanceStates.waiting_for_notification_message:
        return
    
    data = await state.get_data()
    status = data.get("notification_status")
    
    if not status:
        await message.answer("–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    notification_message = ""
    if message.text and message.text != "/skip":
        notification_message = message.text[:300]
    
    try:
        from app.services.remnawave_service import RemnaWaveService
        rw_service = RemnaWaveService()
        
        success = await rw_service.send_manual_status_notification(
            message.bot, 
            status, 
            notification_message
        )
        
        if success:
            await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()
    
    await message.answer(
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîß –ü–∞–Ω–µ–ª—å —Ç–µ—Ö—Ä–∞–±–æ—Ç", callback_data="maintenance_panel")]
        ])
    )


@admin_required
@error_handler
async def back_to_admin_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    
    await callback.message.edit_text(
        texts.ADMIN_PANEL,
        reply_markup=get_admin_main_keyboard(db_user.language)
    )
    await callback.answer()


def register_handlers(dp: Dispatcher):
    
    dp.callback_query.register(
        show_maintenance_panel,
        F.data == "maintenance_panel"
    )
    
    dp.callback_query.register(
        toggle_maintenance_mode,
        F.data == "maintenance_toggle"
    )
    
    dp.callback_query.register(
        toggle_monitoring,
        F.data == "maintenance_monitoring"
    )
    
    dp.callback_query.register(
        force_api_check,
        F.data == "maintenance_check_api"
    )
    
    dp.callback_query.register(
        check_panel_status,
        F.data == "maintenance_check_panel"
    )
    
    dp.callback_query.register(
        send_manual_notification,
        F.data == "maintenance_manual_notify"
    )
    
    dp.callback_query.register(
        handle_manual_notification,
        F.data.startswith("manual_notify_")
    )
    
    dp.callback_query.register(
        back_to_admin_panel,
        F.data == "admin_panel"
    )
    
    dp.message.register(
        process_maintenance_reason,
        MaintenanceStates.waiting_for_reason
    )
    
    dp.message.register(
        process_notification_message,
        MaintenanceStates.waiting_for_notification_message
    )
