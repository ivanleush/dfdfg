import logging
from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import User
from app.services.version_service import version_service
from app.utils.decorators import admin_required, error_handler
from app.localization.texts import get_texts

logger = logging.getLogger(__name__)


@admin_required
@error_handler
async def cmd_check_updates(
    message: types.Message,
    db_user: User,
    db: AsyncSession
):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    
    texts = get_texts(db_user.language)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    checking_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_available = await version_service.check_for_updates()
    version_info = version_service.get_version_info()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    await checking_msg.delete()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if update_available:
        result_text = f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!</b>\n\n"
        result_text += f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: v{version_info['current_version']}\n"
        result_text += f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: v{version_info['latest_version']}\n\n"
        result_text += f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞."
        
        if version_info["changelog"]:
            # –û–±—Ä–µ–∑–∞–µ–º changelog –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            changelog = version_info["changelog"][:800]
            if len(version_info["changelog"]) > 800:
                changelog += "..."
            result_text += f"\n\nüìù <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>\n{changelog}"
    else:
        result_text = f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
        result_text += f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: v{version_info['current_version']}\n"
        result_text += f"–ë–æ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω!"
    
    await message.answer(result_text, parse_mode="HTML")


@admin_required
@error_handler
async def cmd_version_info(
    message: types.Message,
    db_user: User,
    db: AsyncSession
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    
    texts = get_texts(db_user.language)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
    version_info = version_service.get_version_info()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ
    if not version_info["latest_version"]:
        await version_service.check_for_updates()
        version_info = version_service.get_version_info()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    version_text = f"ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏</b>\n\n"
    version_text += f"üì¶ <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> v{version_info['current_version']}\n"
    
    if version_info["latest_version"]:
        version_text += f"üÜï <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è:</b> v{version_info['latest_version']}\n"
        
        if version_info["update_available"]:
            version_text += f"\nüîÑ <b>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</b>\n"
            version_text += f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –¥–æ –≤–µ—Ä—Å–∏–∏ v{version_info['latest_version']}\n"
            
            if version_info["changelog"]:
                # –û–±—Ä–µ–∑–∞–µ–º changelog –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                changelog = version_info["changelog"][:1000]
                if len(version_info["changelog"]) > 1000:
                    changelog += "..."
                version_text += f"\nüìù <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:</b>\n{changelog}"
        else:
            version_text += f"\n‚úÖ <b>–í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞</b>\n"
    else:
        version_text += f"\n‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    version_text += f"\nüîß <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
    version_text += f"‚Ä¢ Python: 3.11+\n"
    version_text += f"‚Ä¢ aiogram: 3.7.0\n"
    version_text += f"‚Ä¢ SQLAlchemy: 2.0.25\n"
    version_text += f"‚Ä¢ PostgreSQL: 15+\n"
    version_text += f"‚Ä¢ Redis: 7+\n"
    
    await message.answer(version_text, parse_mode="HTML")


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    
    dp.message.register(
        cmd_check_updates,
        Command("checkupdates")
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /checkupdates")
    
    dp.message.register(
        cmd_version_info,
        Command("version")
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /version")
