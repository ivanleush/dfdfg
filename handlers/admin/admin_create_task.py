import logging
import re
from aiogram import Router, F, types, Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from app.database.crud.tasks import get_active_tasks, get_task_by_id, create_task, delete_task, delete_task_by_id
from app.database.session import AsyncSessionLocal
from app.keyboards.admin import get_admin_main_keyboard
from app.localization.texts import get_texts
from html import escape


logger = logging.getLogger(__name__)
router = Router()


class TaskCreationStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_channels = State()
    waiting_for_reward = State()


@router.callback_query(F.data == "admin_manage_tasks")
async def admin_manage_tasks(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏."""


    async with AsyncSessionLocal() as db:
        tasks = await get_active_tasks(db)

        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                callback_data="admin_create_task"
            ),
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_panel"
            )
        )

        if tasks:
            for task in tasks:
                builder.add(
                    InlineKeyboardButton(
                        text=f"‚úèÔ∏è {escape(task.title)} ({task.reward_kopeks / 100}‚ÇΩ)",
                        callback_data=f"admin_edit_task_{task.id}"
                    )
                )
                builder.add(
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
                        callback_data=f"admin_delete_task_{task.id}"
                    )
                )

        builder.adjust(1, repeat=True)

        await callback.message.edit_text(
            "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏:",
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()


@router.callback_query(F.data == "admin_create_task")
async def start_task_creation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(TaskCreationStates.waiting_for_title)
    await callback.answer()

@router.message(TaskCreationStates.waiting_for_title)
async def process_task_title(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    await state.update_data(title=message.text.strip())
    await message.answer("‚úçÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:", parse_mode=ParseMode.HTML)
    await state.set_state(TaskCreationStates.waiting_for_description)

@router.message(TaskCreationStates.waiting_for_description)
async def process_task_description(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∫–∞–Ω–∞–ª–æ–≤."""
    await state.update_data(description=message.text.strip())
    await message.answer(
        "üîó –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>ID –∫–∞–Ω–∞–ª–æ–≤</b> –∏ <b>—Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∏—Ö</b>. –§–æ—Ä–º–∞—Ç: <code>ID:—Å—Å—ã–ª–∫–∞</code>. –†–∞–∑–¥–µ–ª–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –∑–∞–ø—è—Ç–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "<code>-1001234567890:https://t.me/+AbcDefGhi, -1009876543210:https://t.me/MyChannel</code>",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(TaskCreationStates.waiting_for_channels)


@router.message(TaskCreationStates.waiting_for_channels)
async def process_task_channels(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç ID –∏ —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ."""
    channels_str = message.text.strip()
    channels_data = []

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –ø–æ ID –∏ —Å—Å—ã–ª–∫–µ
    for entry in channels_str.split(','):
        entry = entry.strip()
        if ':' not in entry:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>ID:—Å—Å—ã–ª–∫–∞</code>.")
            return

        channel_id_str, channel_url = entry.split(':', 1)

        if not re.match(r"^-?\d+$", channel_id_str):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegram
        if not channel_url.startswith(('https://t.me/', 'tg://resolve')):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram.")
            return

        channels_data.append({
            'id': channel_id_str,
            'url': channel_url,
            'name': channel_id_str  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –∏–º—è)
        })

    await state.update_data(channels=channels_data)
    await message.answer(
        "üí∞ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ</b> –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>5000</code> –¥–ª—è 50 —Ä—É–±–ª–µ–π):",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(TaskCreationStates.waiting_for_reward)


@router.message(TaskCreationStates.waiting_for_reward)
async def process_task_reward(message: types.Message, state: FSMContext, db: AsyncSession):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    try:
        reward = int(message.text.strip())
        if reward <= 0:
            await message.answer("‚ùå –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        await state.update_data(reward_kopeks=reward)

        task_data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
        channels_data = task_data['channels']

        await create_task(
            db,
            title=task_data['title'],
            description=task_data['description'],
            channels=channels_data,
            reward_kopeks=task_data['reward_kopeks']
        )

        await message.answer(
            f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task_data['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task_data['description']}\n"
            f"<b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {task_data['reward_kopeks'] / 100}‚ÇΩ",
            parse_mode=ParseMode.HTML
        )
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data.startswith("admin_delete_task_"))
async def delete_task_callback(callback: types.CallbackQuery, db: AsyncSession):
    try:
        task_id = int(callback.data.split('_')[-1])

        success = await delete_task_by_id(db, task_id)  # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

        if success:
            await callback.message.edit_text("–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")