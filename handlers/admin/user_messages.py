import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.crud.user_message import (
    create_user_message, get_all_user_messages, get_user_message_by_id,
    update_user_message, delete_user_message, toggle_user_message_status,
    get_user_messages_stats
)
from app.database.models import User
from app.keyboards.admin import get_admin_main_keyboard
from app.utils.decorators import admin_required, error_handler
from app.localization.texts import get_texts

logger = logging.getLogger(__name__)


class UserMessageStates(StatesGroup):
    waiting_for_message_text = State()
    waiting_for_edit_text = State()


def get_user_messages_keyboard(language: str = "ru"):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìù –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                callback_data="add_user_message"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìã –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π",
                callback_data="list_user_messages:0"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="user_messages_stats"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É",
                callback_data="admin_panel"
            )
        ]
    ])


def get_message_actions_keyboard(message_id: int, is_active: bool, language: str = "ru"):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    status_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if is_active else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"edit_user_message:{message_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=status_text,
                callback_data=f"toggle_user_message:{message_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_user_message:{message_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîô –ö —Å–ø–∏—Å–∫—É",
                callback_data="list_user_messages:0"
            )
        ]
    ])


@admin_required
@error_handler
async def show_user_messages_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    
    text = (
        "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º "
        "–≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –º–µ–∂–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
        "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç HTML —Ç–µ–≥–∏\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ\n"
        "‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_user_messages_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def add_user_message_start(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    from app.utils.validators import get_html_help_text
    
    await callback.message.edit_text(
        f"üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n"
        f"{get_html_help_text()}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    
    await state.set_state(UserMessageStates.waiting_for_message_text)
    await callback.answer()


@admin_required
@error_handler
async def process_new_message_text(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_user_messages_keyboard(db_user.language)
        )
        return
    
    message_text = message.text.strip()
    
    if len(message_text) > 4000:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return
    
    from app.utils.validators import validate_html_tags, get_html_help_text
    
    is_valid, error_msg = validate_html_tags(message_text)
    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ HTML —Ä–∞–∑–º–µ—Ç–∫–µ: {error_msg}\n\n"
            f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode=None 
        )
        return
    
    try:
        new_message = await create_user_message(
            db=db,
            message_text=message_text,
            created_by=db_user.id,
            is_active=True
        )
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"<b>ID:</b> {new_message.id}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' if new_message.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–æ:</b> {new_message.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n"
            f"<blockquote>{message_text}</blockquote>",
            reply_markup=get_user_messages_keyboard(db_user.language),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_user_messages_keyboard(db_user.language)
        )

@admin_required
@error_handler
async def list_user_messages(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    page = 0
    if ":" in callback.data:
        try:
            page = int(callback.data.split(":")[1])
        except (ValueError, IndexError):
            page = 0
    
    limit = 5
    offset = page * limit
    
    messages = await get_all_user_messages(db, offset=offset, limit=limit)
    
    if not messages:
        await callback.message.edit_text(
            "üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
            reply_markup=get_user_messages_keyboard(db_user.language),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
    
    for msg in messages:
        status_emoji = "üü¢" if msg.is_active else "üî¥"
        preview = msg.message_text[:100] + "..." if len(msg.message_text) > 100 else msg.message_text
        preview = preview.replace('<', '&lt;').replace('>', '&gt;')
        
        text += (
            f"{status_emoji} <b>ID {msg.id}</b>\n"
            f"{preview}\n"
            f"üìÖ {msg.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    
    for msg in messages:
        status_emoji = "üü¢" if msg.is_active else "üî¥"
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status_emoji} ID {msg.id}",
                callback_data=f"view_user_message:{msg.id}"
            )
        ])
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"list_user_messages:{page-1}"
            )
        )
    
    nav_buttons.append(
        InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
            callback_data="add_user_message"
        )
    )
    
    if len(messages) == limit:  
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"list_user_messages:{page+1}"
            )
        )
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="user_messages_panel"
        )
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def view_user_message(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    try:
        message_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
        return
    
    message = await get_user_message_by_id(db, message_id)
    
    if not message:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if message.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
    
    text = (
        f"üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ ID {message.id}</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–°–æ–∑–¥–∞–Ω–æ:</b> {message.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {message.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n"
        f"<blockquote>{message.message_text}</blockquote>"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_message_actions_keyboard(
            message_id, message.is_active, db_user.language
        ),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def toggle_message_status(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    try:
        message_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
        return
    
    message = await toggle_user_message_status(db, message_id)
    
    if not message:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ" if message.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
    await callback.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {status_text}")
    
    await view_user_message(callback, db_user, db)


@admin_required
@error_handler
async def delete_message_confirm(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        message_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
        return
    
    success = await delete_user_message(db, message_id)
    
    if success:
        await callback.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        await list_user_messages(
            types.CallbackQuery(
                id=callback.id,
                from_user=callback.from_user,
                chat_instance=callback.chat_instance,
                data="list_user_messages:0",
                message=callback.message
            ),
            db_user,
            db
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)


@admin_required
@error_handler
async def show_messages_stats(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    stats = await get_user_messages_stats(db)
    
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{stats['total_messages']}</b>\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats['active_messages']}</b>\n"
        f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: <b>{stats['inactive_messages']}</b>\n\n"
        "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º "
        "–≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –º–µ–∂–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π."
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="user_messages_panel"
            )
        ]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@admin_required
@error_handler
async def edit_user_message_start(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    try:
        message_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
        return
    
    message = await get_user_message_by_id(db, message_id)
    
    if not message:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ID {message.id}</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n"
        f"<blockquote>{message.message_text}</blockquote>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode="HTML"
    )
    
    await state.set_data({"editing_message_id": message_id})
    await state.set_state(UserMessageStates.waiting_for_edit_text)
    await callback.answer()

@admin_required
@error_handler
async def process_edit_message_text(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_user_messages_keyboard(db_user.language)
        )
        return
    
    data = await state.get_data()
    message_id = data.get("editing_message_id")
    
    if not message_id:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    new_text = message.text.strip()
    
    if len(new_text) > 4000:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return
    
    try:
        updated_message = await update_user_message(
            db=db,
            message_id=message_id,
            message_text=new_text
        )
        
        if updated_message:
            await state.clear()
            await message.answer(
                f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                f"<b>ID:</b> {updated_message.id}\n"
                f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_message.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"<b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n"
                f"<blockquote>{new_text}</blockquote>",
                reply_markup=get_user_messages_keyboard(db_user.language),
                parse_mode="HTML"
            )
        else:
            await state.clear()
            await message.answer(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
                reply_markup=get_user_messages_keyboard(db_user.language)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_user_messages_keyboard(db_user.language)
        )


def register_handlers(dp: Dispatcher):
    
    dp.callback_query.register(
        show_user_messages_panel,
        F.data == "user_messages_panel"
    )
    
    dp.callback_query.register(
        add_user_message_start,
        F.data == "add_user_message"
    )
    
    dp.message.register(
        process_new_message_text,
        StateFilter(UserMessageStates.waiting_for_message_text)
    )

    dp.callback_query.register(
        edit_user_message_start,
        F.data.startswith("edit_user_message:")
    )
    
    dp.message.register(
        process_edit_message_text,
        StateFilter(UserMessageStates.waiting_for_edit_text)
    )
    
    dp.callback_query.register(
        list_user_messages,
        F.data.startswith("list_user_messages")
    )
    
    dp.callback_query.register(
        view_user_message,
        F.data.startswith("view_user_message:")
    )
    
    dp.callback_query.register(
        toggle_message_status,
        F.data.startswith("toggle_user_message:")
    )
    
    dp.callback_query.register(
        delete_message_confirm,
        F.data.startswith("delete_user_message:")
    )
    
    dp.callback_query.register(
        show_messages_stats,
        F.data == "user_messages_stats"
    )
