import logging
from datetime import datetime, timedelta
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.states import AdminStates
from app.database.models import PromoCode, PromoCodeUse, PromoCodeType, User
from app.keyboards.admin import (
    get_admin_promocodes_keyboard, get_promocode_type_keyboard,
    get_admin_pagination_keyboard, get_confirmation_keyboard
)
from app.localization.texts import get_texts
from app.database.crud.promocode import (
    get_promocodes_list, get_promocodes_count, create_promocode,
    get_promocode_statistics, get_promocode_by_code, update_promocode,
    delete_promocode
)
from app.utils.decorators import admin_required, error_handler
from app.utils.formatters import format_datetime

logger = logging.getLogger(__name__)


@admin_required
@error_handler
async def show_promocodes_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    total_codes = await get_promocodes_count(db)
    active_codes = await get_promocodes_count(db, is_active=True)
    
    text = f"""
üé´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {total_codes}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_codes}
- –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_codes - active_codes}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_promocodes_keyboard(db_user.language)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_promocodes_list(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    page: int = 1
):
    limit = 10
    offset = (page - 1) * limit
    
    promocodes = await get_promocodes_list(db, offset=offset, limit=limit)
    total_count = await get_promocodes_count(db)
    total_pages = (total_count + limit - 1) // limit
    
    if not promocodes:
        await callback.message.edit_text(
            "üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promocodes")]
            ])
        )
        await callback.answer()
        return
    
    text = f"üé´ <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b> (—Å—Ç—Ä. {page}/{total_pages})\n\n"
    keyboard = []
    
    for promo in promocodes:
        status_emoji = "‚úÖ" if promo.is_active else "‚ùå"
        type_emoji = {"balance": "üí∞", "subscription_days": "üìÖ", "trial_subscription": "üéÅ"}.get(promo.type, "üé´")
        
        text += f"{status_emoji} {type_emoji} <code>{promo.code}</code>\n"
        text += f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo.current_uses}/{promo.max_uses}\n"
        
        if promo.type == PromoCodeType.BALANCE.value:
            text += f"üí∞ –ë–æ–Ω—É—Å: {settings.format_price(promo.balance_bonus_kopeks)}\n"
        elif promo.type == PromoCodeType.SUBSCRIPTION_DAYS.value:
            text += f"üìÖ –î–Ω–µ–π: {promo.subscription_days}\n"
        
        if promo.valid_until:
            text += f"‚è∞ –î–æ: {format_datetime(promo.valid_until)}\n"
        
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"üé´ {promo.code}", 
                callback_data=f"promo_manage_{promo.id}"
            )
        ])
        
        text += "\n" 
    
    if total_pages > 1:
        pagination_row = get_admin_pagination_keyboard(
            page, total_pages, "admin_promo_list", "admin_promocodes", db_user.language
        ).inline_keyboard[0]
        keyboard.append(pagination_row)
    
    keyboard.extend([
        [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="admin_promo_create")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promocodes")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_promocode_management(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    promo_id = int(callback.data.split('_')[-1])
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_emoji = "‚úÖ" if promo.is_active else "‚ùå"
    type_emoji = {"balance": "üí∞", "subscription_days": "üìÖ", "trial_subscription": "üéÅ"}.get(promo.type, "üé´")
    
    text = f"""
üé´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º</b>

{type_emoji} <b>–ö–æ–¥:</b> <code>{promo.code}</code>
{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–µ–Ω' if promo.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {promo.current_uses}/{promo.max_uses}
"""
    
    if promo.type == PromoCodeType.BALANCE.value:
        text += f"üí∞ <b>–ë–æ–Ω—É—Å:</b> {settings.format_price(promo.balance_bonus_kopeks)}\n"
    elif promo.type == PromoCodeType.SUBSCRIPTION_DAYS.value:
        text += f"üìÖ <b>–î–Ω–µ–π:</b> {promo.subscription_days}\n"
    
    if promo.valid_until:
        text += f"‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_datetime(promo.valid_until)}\n"
    
    text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {format_datetime(promo.created_at)}\n"
    
    keyboard = [
        [
            types.InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data=f"promo_edit_{promo.id}"
            ),
            types.InlineKeyboardButton(
                text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å", 
                callback_data=f"promo_toggle_{promo.id}"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                callback_data=f"promo_stats_{promo.id}"
            ),
            types.InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                callback_data=f"promo_delete_{promo.id}"
            )
        ],
        [
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_promo_list")
        ]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@admin_required
@error_handler
async def show_promocode_edit_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    try:
        promo_id = int(callback.data.split('_')[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)
        return
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> <code>{promo.code}</code>

üí∞ <b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
"""
    
    if promo.type == PromoCodeType.BALANCE.value:
        text += f"‚Ä¢ –ë–æ–Ω—É—Å: {settings.format_price(promo.balance_bonus_kopeks)}\n"
    elif promo.type in [PromoCodeType.SUBSCRIPTION_DAYS.value, PromoCodeType.TRIAL_SUBSCRIPTION.value]:
        text += f"‚Ä¢ –î–Ω–µ–π: {promo.subscription_days}\n"
    
    text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo.current_uses}/{promo.max_uses}\n"
    
    if promo.valid_until:
        text += f"‚Ä¢ –î–æ: {format_datetime(promo.valid_until)}\n"
    else:
        text += f"‚Ä¢ –°—Ä–æ–∫: –±–µ—Å—Å—Ä–æ—á–Ω–æ\n"
    
    text += f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    keyboard = [
        [
            types.InlineKeyboardButton(
                text="üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", 
                callback_data=f"promo_edit_date_{promo.id}"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", 
                callback_data=f"promo_edit_uses_{promo.id}"
            )
        ]
    ]
    
    if promo.type == PromoCodeType.BALANCE.value:
        keyboard.insert(1, [
            types.InlineKeyboardButton(
                text="üí∞ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞", 
                callback_data=f"promo_edit_amount_{promo.id}"
            )
        ])
    elif promo.type in [PromoCodeType.SUBSCRIPTION_DAYS.value, PromoCodeType.TRIAL_SUBSCRIPTION.value]:
        keyboard.insert(1, [
            types.InlineKeyboardButton(
                text="üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", 
                callback_data=f"promo_edit_days_{promo.id}"
            )
        ])
    
    keyboard.extend([
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"promo_manage_{promo.id}"
            )
        ]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def start_edit_promocode_date(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    try:
        promo_id = int(callback.data.split('_')[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)
        return
    
    await state.update_data(
        editing_promo_id=promo_id,
        edit_action="date"
    )
    
    text = f"""
üìÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞):
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <b>0</b> –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ä–æ–∫–∞

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 30 (–ø—Ä–æ–º–æ–∫–æ–¥ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å 30 –¥–Ω–µ–π)</i>

ID –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promo_id}
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"promo_edit_{promo_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(AdminStates.setting_promocode_expiry)
    await callback.answer()


@admin_required
@error_handler
async def start_edit_promocode_amount(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    try:
        promo_id = int(callback.data.split('_')[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)
        return
    
    await state.update_data(
        editing_promo_id=promo_id,
        edit_action="amount"
    )
    
    text = f"""
üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –±–æ–Ω—É—Å–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:
<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 500</i>

ID –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promo_id}
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"promo_edit_{promo_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(AdminStates.setting_promocode_value)
    await callback.answer()

@admin_required
@error_handler
async def start_edit_promocode_days(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ ID
    try:
        promo_id = int(callback.data.split('_')[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)
        return
    
    await state.update_data(
        editing_promo_id=promo_id,
        edit_action="days"
    )
    
    text = f"""
üìÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:
<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 30</i>

ID –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promo_id}
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"promo_edit_{promo_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(AdminStates.setting_promocode_value)
    await callback.answer()


@admin_required
@error_handler
async def start_edit_promocode_uses(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    try:
        promo_id = int(callback.data.split('_')[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)
        return
    
    await state.update_data(
        editing_promo_id=promo_id,
        edit_action="uses"
    )
    
    text = f"""
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ <b>0</b> –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 100</i>

ID –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promo_id}
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"promo_edit_{promo_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(AdminStates.setting_promocode_uses)
    await callback.answer()


@admin_required
@error_handler
async def start_promocode_creation(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    await callback.message.edit_text(
        "üé´ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
        reply_markup=get_promocode_type_keyboard(db_user.language)
    )
    await callback.answer()


@admin_required
@error_handler
async def select_promocode_type(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    promo_type = callback.data.split('_')[-1]
    
    type_names = {
        "balance": "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
        "days": "üìÖ –î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
        "trial": "üéÅ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
    }
    
    await state.update_data(promocode_type=promo_type)
    
    await callback.message.edit_text(
        f"üé´ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        f"–¢–∏–ø: {type_names.get(promo_type, promo_type)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_promocodes")]
        ])
    )
    
    await state.set_state(AdminStates.creating_promocode)
    await callback.answer()


@admin_required
@error_handler
async def process_promocode_code(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    code = message.text.strip().upper()
    
    if not code.isalnum() or len(code) < 3 or len(code) > 20:
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (3-20 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    existing = await get_promocode_by_code(db, code)
    if existing:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    await state.update_data(promocode_code=code)
    
    data = await state.get_data()
    promo_type = data.get('promocode_type')
    
    if promo_type == "balance":
        await message.answer(
            f"üí∞ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{code}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–≤ —Ä—É–±–ª—è—Ö):"
        )
        await state.set_state(AdminStates.setting_promocode_value)
    elif promo_type == "days":
        await message.answer(
            f"üìÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{code}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:"
        )
        await state.set_state(AdminStates.setting_promocode_value)
    elif promo_type == "trial":
        await message.answer(
            f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{code}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:"
        )
        await state.set_state(AdminStates.setting_promocode_value)


@admin_required
@error_handler
async def process_promocode_value(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    
    if data.get('editing_promo_id'):
        await handle_edit_value(message, db_user, state, db)
        return
    
    try:
        value = int(message.text.strip())
        
        promo_type = data.get('promocode_type')
        
        if promo_type == "balance" and (value < 1 or value > 10000):
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10,000 —Ä—É–±–ª–µ–π")
            return
        elif promo_type in ["days", "trial"] and (value < 1 or value > 3650):
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 3650")
            return
        
        await state.update_data(promocode_value=value)
        
        await message.answer(
            f"üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∏–ª–∏ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞):"
        )
        await state.set_state(AdminStates.setting_promocode_uses)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


async def handle_edit_value(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    promo_id = data.get('editing_promo_id')
    edit_action = data.get('edit_action')
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        value = int(message.text.strip())
        
        if edit_action == "amount":
            if value < 1 or value > 10000:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10,000 —Ä—É–±–ª–µ–π")
                return
            
            await update_promocode(db, promo, balance_bonus_kopeks=value * 100)
            await message.answer(
                f"‚úÖ –°—É–º–º–∞ –±–æ–Ω—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {value}‚ÇΩ",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üé´ –ö –ø—Ä–æ–º–æ–∫–æ–¥—É", callback_data=f"promo_manage_{promo_id}")]
                ])
            )
            
        elif edit_action == "days":
            if value < 1 or value > 3650:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 3650")
                return
            
            await update_promocode(db, promo, subscription_days=value)
            await message.answer(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {value}",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üé´ –ö –ø—Ä–æ–º–æ–∫–æ–¥—É", callback_data=f"promo_manage_{promo_id}")]
                ])
            )
        
        await state.clear()
        logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo.code} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {db_user.telegram_id}: {edit_action} = {value}")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@admin_required
@error_handler
async def process_promocode_uses(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    
    if data.get('editing_promo_id'):
        await handle_edit_uses(message, db_user, state, db)
        return
    
    try:
        max_uses = int(message.text.strip())
        
        if max_uses < 0 or max_uses > 100000:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100,000")
            return
        
        if max_uses == 0:
            max_uses = 999999
        
        await state.update_data(promocode_max_uses=max_uses)
        
        await message.answer(
            f"‚è∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –¥–Ω—è—Ö (–∏–ª–∏ 0 –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ):"
        )
        await state.set_state(AdminStates.setting_promocode_expiry)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


async def handle_edit_uses(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    promo_id = data.get('editing_promo_id')
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        max_uses = int(message.text.strip())
        
        if max_uses < 0 or max_uses > 100000:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100,000")
            return
        
        if max_uses == 0:
            max_uses = 999999
        
        if max_uses < promo.current_uses:
            await message.answer(
                f"‚ùå –ù–æ–≤—ã–π –ª–∏–º–∏—Ç ({max_uses}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π ({promo.current_uses})"
            )
            return
        
        await update_promocode(db, promo, max_uses=max_uses)
        
        uses_text = "–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ" if max_uses == 999999 else str(max_uses)
        await message.answer(
            f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {uses_text}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üé´ –ö –ø—Ä–æ–º–æ–∫–æ–¥—É", callback_data=f"promo_manage_{promo_id}")]
            ])
        )
        
        await state.clear()
        logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo.code} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {db_user.telegram_id}: max_uses = {max_uses}")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@admin_required
@error_handler
async def process_promocode_expiry(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    
    if data.get('editing_promo_id'):
        await handle_edit_expiry(message, db_user, state, db)
        return
    
    try:
        expiry_days = int(message.text.strip())
        
        if expiry_days < 0 or expiry_days > 3650:
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 3650 –¥–Ω–µ–π")
            return
        
        code = data.get('promocode_code')
        promo_type = data.get('promocode_type')
        value = data.get('promocode_value', 0)
        max_uses = data.get('promocode_max_uses', 1)
        
        valid_until = None
        if expiry_days > 0:
            valid_until = datetime.utcnow() + timedelta(days=expiry_days)
        
        type_map = {
            "balance": PromoCodeType.BALANCE,
            "days": PromoCodeType.SUBSCRIPTION_DAYS,
            "trial": PromoCodeType.TRIAL_SUBSCRIPTION
        }
        
        promocode = await create_promocode(
            db=db,
            code=code,
            type=type_map[promo_type],
            balance_bonus_kopeks=value * 100 if promo_type == "balance" else 0,
            subscription_days=value if promo_type in ["days", "trial"] else 0,
            max_uses=max_uses,
            valid_until=valid_until,
            created_by=db_user.id
        )
        
        type_names = {
            "balance": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", 
            "days": "–î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏", 
            "trial": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        }
        
        summary_text = f"""
‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!</b>

üé´ <b>–ö–æ–¥:</b> <code>{promocode.code}</code>
üìù <b>–¢–∏–ø:</b> {type_names.get(promo_type)}
"""
        
        if promo_type == "balance":
            summary_text += f"üí∞ <b>–°—É–º–º–∞:</b> {settings.format_price(promocode.balance_bonus_kopeks)}\n"
        elif promo_type in ["days", "trial"]:
            summary_text += f"üìÖ <b>–î–Ω–µ–π:</b> {promocode.subscription_days}\n"
        
        summary_text += f"üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {promocode.max_uses}\n"
        
        if promocode.valid_until:
            summary_text += f"‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {format_datetime(promocode.valid_until)}\n"
        
        await message.answer(
            summary_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üé´ –ö –ø—Ä–æ–º–æ–∫–æ–¥–∞–º", callback_data="admin_promocodes")]
            ])
        )
        
        await state.clear()
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ {code} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {db_user.telegram_id}")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")


async def handle_edit_expiry(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    promo_id = data.get('editing_promo_id')
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        expiry_days = int(message.text.strip())
        
        if expiry_days < 0 or expiry_days > 3650:
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 3650 –¥–Ω–µ–π")
            return
        
        valid_until = None
        if expiry_days > 0:
            valid_until = datetime.utcnow() + timedelta(days=expiry_days)
        
        await update_promocode(db, promo, valid_until=valid_until)
        
        if valid_until:
            expiry_text = f"–¥–æ {format_datetime(valid_until)}"
        else:
            expiry_text = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
            
        await message.answer(
            f"‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω: {expiry_text}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üé´ –ö –ø—Ä–æ–º–æ–∫–æ–¥—É", callback_data=f"promo_manage_{promo_id}")]
            ])
        )
        
        await state.clear()
        logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo.code} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {db_user.telegram_id}: expiry = {expiry_days} –¥–Ω–µ–π")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")


@admin_required
@error_handler
async def toggle_promocode_status(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    promo_id = int(callback.data.split('_')[-1])
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    new_status = not promo.is_active
    await update_promocode(db, promo, is_active=new_status)
    
    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    await callback.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {status_text}", show_alert=True)
    
    await show_promocode_management(callback, db_user, db)


@admin_required
@error_handler
async def confirm_delete_promocode(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    try:
        promo_id = int(callback.data.split('_')[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)
        return
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"""
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ <code>{promo.code}</code>?

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo.current_uses}/{promo.max_uses}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if promo.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!

ID: {promo_id}
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", 
                callback_data=f"promo_delete_confirm_{promo.id}"
            ),
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", 
                callback_data=f"promo_manage_{promo.id}"
            )
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@admin_required
@error_handler
async def delete_promocode_confirmed(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    try:
        promo_id = int(callback.data.split('_')[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)
        return
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    code = promo.code
    success = await delete_promocode(db, promo)
    
    if success:
        await callback.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–¥–∞–ª–µ–Ω", show_alert=True)
        await show_promocodes_list(callback, db_user, db)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞", show_alert=True)


@admin_required
@error_handler
async def show_promocode_stats(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    promo_id = int(callback.data.split('_')[-1])
    
    promo = await db.get(PromoCode, promo_id)
    if not promo:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    stats = await get_promocode_statistics(db, promo_id)
    
    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b> <code>{promo.code}</code>

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['total_uses']}
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['today_uses']}
- –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo.max_uses - promo.current_uses}

üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
"""
    
    if stats['recent_uses']:
        for use in stats['recent_uses'][:5]:
            use_date = format_datetime(use.used_at)
            
            if hasattr(use, 'user_username') and use.user_username:
                user_display = f"@{use.user_username}"
            elif hasattr(use, 'user_full_name') and use.user_full_name:
                user_display = use.user_full_name
            elif hasattr(use, 'user_telegram_id'):
                user_display = f"ID{use.user_telegram_id}"
            else:
                user_display = f"ID{use.user_id}"
            
            text += f"- {use_date} | {user_display}\n"
    else:
        text += "- –ü–æ–∫–∞ –Ω–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"promo_manage_{promo.id}"
            )
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@admin_required
@error_handler
async def show_general_promocode_stats(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    total_codes = await get_promocodes_count(db)
    active_codes = await get_promocodes_count(db, is_active=True)
    
    text = f"""
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>

üìà <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
- –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {total_codes}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_codes}
- –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_codes - active_codes}

–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.
"""
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üé´ –ö –ø—Ä–æ–º–æ–∫–æ–¥–∞–º", callback_data="admin_promo_list")
        ],
        [
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promocodes")
        ]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.callback_query.register(show_promocodes_menu, F.data == "admin_promocodes")
    dp.callback_query.register(show_promocodes_list, F.data == "admin_promo_list")
    dp.callback_query.register(start_promocode_creation, F.data == "admin_promo_create")
    dp.callback_query.register(select_promocode_type, F.data.startswith("promo_type_"))
    
    dp.callback_query.register(show_promocode_management, F.data.startswith("promo_manage_"))
    dp.callback_query.register(toggle_promocode_status, F.data.startswith("promo_toggle_"))
    dp.callback_query.register(show_promocode_stats, F.data.startswith("promo_stats_"))
    
    dp.callback_query.register(start_edit_promocode_date, F.data.startswith("promo_edit_date_"))
    dp.callback_query.register(start_edit_promocode_amount, F.data.startswith("promo_edit_amount_"))
    dp.callback_query.register(start_edit_promocode_days, F.data.startswith("promo_edit_days_"))
    dp.callback_query.register(start_edit_promocode_uses, F.data.startswith("promo_edit_uses_"))
    dp.callback_query.register(show_general_promocode_stats, F.data == "admin_promo_general_stats")
    
    dp.callback_query.register(
        show_promocode_edit_menu, 
        F.data.regexp(r"^promo_edit_\d+$")
    )
    
    dp.callback_query.register(delete_promocode_confirmed, F.data.startswith("promo_delete_confirm_"))
    dp.callback_query.register(confirm_delete_promocode, F.data.startswith("promo_delete_"))
    
    dp.message.register(process_promocode_code, AdminStates.creating_promocode)
    dp.message.register(process_promocode_value, AdminStates.setting_promocode_value)
    dp.message.register(process_promocode_uses, AdminStates.setting_promocode_uses)
    dp.message.register(process_promocode_expiry, AdminStates.setting_promocode_expiry)
    
