import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.states import AdminStates
from app.database.models import User
from app.database.crud.server_squad import (
    get_all_server_squads, get_server_squad_by_id, update_server_squad,
    delete_server_squad, sync_with_remnawave, get_server_statistics,
    create_server_squad, get_available_server_squads
)
from app.services.remnawave_service import RemnaWaveService
from app.utils.decorators import admin_required, error_handler
from app.utils.cache import cache

logger = logging.getLogger(__name__)


@admin_required
@error_handler
async def show_servers_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    stats = await get_server_statistics(db)
    
    text = f"""
üåê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {stats['total_servers']}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ: {stats['available_servers']}
‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ: {stats['unavailable_servers']}
‚Ä¢ –° –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏: {stats['servers_with_connections']}

üí∞ <b>–í—ã—Ä—É—á–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>
‚Ä¢ –û–±—â–∞—è: {stats['total_revenue_rubles']:.2f} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="admin_servers_list"),
            types.InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="admin_servers_sync")
        ],
        [
            types.InlineKeyboardButton(text="üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫–∏", callback_data="admin_servers_sync_counts"),
            types.InlineKeyboardButton(text="üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_servers_stats")
        ],
        [
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_subscriptions")
        ]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def show_servers_list(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    page: int = 1
):
    
    servers, total_count = await get_all_server_squads(db, page=page, limit=10)
    total_pages = (total_count + 9) // 10
    
    if not servers:
        text = "üåê <b>–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤</b>\n\n‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        text = f"üåê <b>–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤</b>\n\n"
        text += f"üìä –í—Å–µ–≥–æ: {total_count} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{total_pages}\n\n"
        
        for i, server in enumerate(servers, 1 + (page - 1) * 10):
            status_emoji = "‚úÖ" if server.is_available else "‚ùå"
            price_text = f"{server.price_rubles:.2f} ‚ÇΩ" if server.price_kopeks > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            
            text += f"{i}. {status_emoji} {server.display_name}\n"
            text += f"   üí∞ –¶–µ–Ω–∞: {price_text}"
            
            if server.max_users:
                text += f" | üë• {server.current_users}/{server.max_users}"
            
            text += f"\n   UUID: <code>{server.squad_uuid}</code>\n\n"
    
    keyboard = []
    
    for i, server in enumerate(servers):
        row_num = i // 2 
        if len(keyboard) <= row_num:
            keyboard.append([])
        
        status_emoji = "‚úÖ" if server.is_available else "‚ùå"
        keyboard[row_num].append(
            types.InlineKeyboardButton(
                text=f"{status_emoji} {server.display_name[:15]}...",
                callback_data=f"admin_server_edit_{server.id}"
            )
        )
    
    if total_pages > 1:
        nav_row = []
        if page > 1:
            nav_row.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è", callback_data=f"admin_servers_list_page_{page-1}"
            ))
        
        nav_row.append(types.InlineKeyboardButton(
            text=f"{page}/{total_pages}", callback_data="current_page"
        ))
        
        if page < total_pages:
            nav_row.append(types.InlineKeyboardButton(
                text="‚û°Ô∏è", callback_data=f"admin_servers_list_page_{page+1}"
            ))
        
        keyboard.append(nav_row)
    
    keyboard.extend([
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def sync_servers_with_remnawave(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    await callback.message.edit_text(
        "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Remnawave...\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.",
        reply_markup=None
    )
    
    try:
        remnawave_service = RemnaWaveService()
        squads = await remnawave_service.get_all_squads()
        
        if not squads:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–≤–∞–¥–∞—Ö –∏–∑ Remnawave.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]
                ])
            )
            return
        
        created, updated, disabled = await sync_with_remnawave(db, squads)
        
        await cache.delete("available_countries")
        
        text = f"""
‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {created}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated}
‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {disabled}
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(squads)}

‚ÑπÔ∏è –ù–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ.
–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤ —Å–ø–∏—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤.
"""
        
        keyboard = [
            [
                types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="admin_servers_list"),
                types.InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="admin_servers_sync")
            ],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]
        ]
        
        await callback.message.edit_text(
            text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]
            ])
        )
    
    await callback.answer()


@admin_required
@error_handler
async def show_server_edit_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    status_emoji = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if server.is_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    price_text = f"{server.price_rubles:.2f} ‚ÇΩ" if server.price_kopeks > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    
    text = f"""
üåê <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ ID: {server.id}
‚Ä¢ UUID: <code>{server.squad_uuid}</code>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {server.display_name}
‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ: {server.original_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji}

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –¶–µ–Ω–∞: {price_text}
‚Ä¢ –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {server.country_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {server.max_users or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}
‚Ä¢ –¢–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {server.current_users}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{server.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_server_edit_name_{server.id}"),
            types.InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"admin_server_edit_price_{server.id}")
        ],
        [
            types.InlineKeyboardButton(text="üåç –°—Ç—Ä–∞–Ω–∞", callback_data=f"admin_server_edit_country_{server.id}"),
            types.InlineKeyboardButton(text="üë• –õ–∏–º–∏—Ç", callback_data=f"admin_server_edit_limit_{server.id}")
        ],
        [
            types.InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_server_edit_desc_{server.id}")
        ],
        [
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å" if server.is_available else "‚úÖ –í–∫–ª—é—á–∏—Ç—å",
                callback_data=f"admin_server_toggle_{server.id}"
            )
        ],
        [
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_server_delete_{server.id}"),
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers_list")
        ]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def toggle_server_availability(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    new_status = not server.is_available
    await update_server_squad(db, server_id, is_available=new_status)
    
    await cache.delete("available_countries")
    
    status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await callback.answer(f"‚úÖ –°–µ—Ä–≤–µ—Ä {status_text}!")
    
    server = await get_server_squad_by_id(db, server_id)
    
    status_emoji = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if server.is_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    price_text = f"{server.price_rubles:.2f} ‚ÇΩ" if server.price_kopeks > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    
    text = f"""
üåê <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ ID: {server.id}
‚Ä¢ UUID: <code>{server.squad_uuid}</code>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {server.display_name}
‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ: {server.original_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji}

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –¶–µ–Ω–∞: {price_text}
‚Ä¢ –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: {server.country_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {server.max_users or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}
‚Ä¢ –¢–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {server.current_users}

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{server.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_server_edit_name_{server.id}"),
            types.InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"admin_server_edit_price_{server.id}")
        ],
        [
            types.InlineKeyboardButton(text="üåç –°—Ç—Ä–∞–Ω–∞", callback_data=f"admin_server_edit_country_{server.id}"),
            types.InlineKeyboardButton(text="üë• –õ–∏–º–∏—Ç", callback_data=f"admin_server_edit_limit_{server.id}")
        ],
        [
            types.InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_server_edit_desc_{server.id}")
        ],
        [
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å" if server.is_available else "‚úÖ –í–∫–ª—é—á–∏—Ç—å",
                callback_data=f"admin_server_toggle_{server.id}"
            )
        ],
        [
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_server_delete_{server.id}"),
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers_list")
        ]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )


@admin_required
@error_handler
async def start_server_edit_price(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await state.set_data({'server_id': server_id})
    await state.set_state(AdminStates.editing_server_price)
    
    current_price = f"{server.price_rubles:.2f} ‚ÇΩ" if server.price_kopeks > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
    
    await callback.message.edit_text(
        f"üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.50) –∏–ª–∏ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_server_edit_{server_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def process_server_price_edit(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    data = await state.get_data()
    server_id = data.get('server_id')
    
    try:
        price_rubles = float(message.text.replace(',', '.'))
        
        if price_rubles < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
            return
        
        if price_rubles > 10000:
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º 10,000 ‚ÇΩ)")
            return
        
        price_kopeks = int(price_rubles * 100)
        
        server = await update_server_squad(db, server_id, price_kopeks=price_kopeks)
        
        if server:
            await state.clear()
            
            await cache.delete("available_countries")
            
            price_text = f"{price_rubles:.2f} ‚ÇΩ" if price_kopeks > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{price_text}</b>",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"admin_server_edit_{server_id}")]
                ]),
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.50)")


@admin_required
@error_handler
async def start_server_edit_name(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await state.set_data({'server_id': server_id})
    await state.set_state(AdminStates.editing_server_name)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{server.display_name}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_server_edit_{server_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def process_server_name_edit(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    data = await state.get_data()
    server_id = data.get('server_id')
    
    new_name = message.text.strip()
    
    if len(new_name) > 255:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    if len(new_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    server = await update_server_squad(db, server_id, display_name=new_name)
    
    if server:
        await state.clear()
        
        await cache.delete("available_countries")
        
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{new_name}</b>",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"admin_server_edit_{server_id}")]
            ]),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")


@admin_required
@error_handler
async def delete_server_confirm(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    text = f"""
üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:
<b>{server.display_name}</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>
–°–µ—Ä–≤–µ—Ä –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫ –Ω–µ–º—É –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
"""
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_server_delete_confirm_{server_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_server_edit_{server_id}")
        ]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def delete_server_execute(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    success = await delete_server_squad(db, server_id)
    
    if success:
        await cache.delete("available_countries")
        
        await callback.message.edit_text(
            f"‚úÖ –°–µ—Ä–≤–µ—Ä <b>{server.display_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="admin_servers_list")]
            ]),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä <b>{server.display_name}</b>\n\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –∫ –Ω–µ–º—É –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"admin_server_edit_{server_id}")]
            ]),
            parse_mode="HTML"
        )
    
    await callback.answer()


@admin_required
@error_handler
async def show_server_detailed_stats(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    stats = await get_server_statistics(db)
    available_servers = await get_available_server_squads(db)
    
    text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤</b>

<b>üåê –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {stats['total_servers']}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ: {stats['available_servers']}
‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ: {stats['unavailable_servers']}
‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏: {stats['servers_with_connections']}

<b>üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue_rubles']:.2f} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ —Å–µ—Ä–≤–µ—Ä: {(stats['total_revenue_rubles'] / max(stats['servers_with_connections'], 1)):.2f} ‚ÇΩ

<b>üî• –¢–æ–ø —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ:</b>
"""
    
    sorted_servers = sorted(available_servers, key=lambda x: x.price_kopeks, reverse=True)
    
    for i, server in enumerate(sorted_servers[:5], 1):
        price_text = f"{server.price_rubles:.2f} ‚ÇΩ" if server.price_kopeks > 0 else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        text += f"{i}. {server.display_name} - {price_text}\n"
    
    if not sorted_servers:
        text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
    
    keyboard = [
        [
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_servers_stats"),
            types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data="admin_servers_list")
        ],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def start_server_edit_country(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await state.set_data({'server_id': server_id})
    await state.set_state(AdminStates.editing_server_country)
    
    current_country = server.country_code or "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    await callback.message.edit_text(
        f"üåç <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã: <b>{current_country}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: RU, US, DE) –∏–ª–∏ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_server_edit_{server_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def process_server_country_edit(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    data = await state.get_data()
    server_id = data.get('server_id')
    
    new_country = message.text.strip().upper()
    
    if new_country == "-":
        new_country = None
    elif len(new_country) > 5:
        await message.answer("‚ùå –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    server = await update_server_squad(db, server_id, country_code=new_country)
    
    if server:
        await state.clear()
        
        await cache.delete("available_countries")
        
        country_text = new_country or "–£–¥–∞–ª–µ–Ω"
        await message.answer(
            f"‚úÖ –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{country_text}</b>",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"admin_server_edit_{server_id}")]
            ]),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")


@admin_required
@error_handler
async def start_server_edit_limit(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await state.set_data({'server_id': server_id})
    await state.set_state(AdminStates.editing_server_limit)
    
    current_limit = server.max_users or "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
    
    await callback.message.edit_text(
        f"üë• <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: <b>{current_limit}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–∏—Å–ª–æ) –∏–ª–∏ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_server_edit_{server_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def process_server_limit_edit(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    data = await state.get_data()
    server_id = data.get('server_id')
    
    try:
        limit = int(message.text.strip())
        
        if limit < 0:
            await message.answer("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        if limit > 10000:
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç (–º–∞–∫—Å–∏–º—É–º 10,000)")
            return
        
        max_users = limit if limit > 0 else None
        
        server = await update_server_squad(db, server_id, max_users=max_users)
        
        if server:
            await state.clear()
            
            limit_text = f"{limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" if limit > 0 else "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
            await message.answer(
                f"‚úÖ –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{limit_text}</b>",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"admin_server_edit_{server_id}")]
                ]),
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


@admin_required
@error_handler
async def start_server_edit_description(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    server_id = int(callback.data.split('_')[-1])
    server = await get_server_squad_by_id(db, server_id)
    
    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await state.set_data({'server_id': server_id})
    await state.set_state(AdminStates.editing_server_description)
    
    current_desc = server.description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    await callback.message.edit_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n<i>{current_desc}</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_server_edit_{server_id}")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_required
@error_handler
async def process_server_description_edit(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    
    data = await state.get_data()
    server_id = data.get('server_id')
    
    new_description = message.text.strip()
    
    if new_description == "-":
        new_description = None
    elif len(new_description) > 1000:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    server = await update_server_squad(db, server_id, description=new_description)
    
    if server:
        await state.clear()
        
        desc_text = new_description or "–£–¥–∞–ª–µ–Ω–æ"
        await message.answer(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ:\n\n<i>{desc_text}</i>",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"admin_server_edit_{server_id}")]
            ]),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")

@admin_required
@error_handler
async def sync_server_user_counts_handler(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    await callback.message.edit_text(
        "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
        reply_markup=None
    )
    
    try:
        from app.database.crud.server_squad import sync_server_user_counts
        
        updated_count = await sync_server_user_counts(db)
        
        text = f"""
‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {updated_count}

–°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""
        
        keyboard = [
            [
                types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="admin_servers_list"),
                types.InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="admin_servers_sync_counts")
            ],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]
        ]
        
        await callback.message.edit_text(
            text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers")]
            ])
        )
    
    await callback.answer()


@admin_required
@error_handler  
async def handle_servers_pagination(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    
    page = int(callback.data.split('_')[-1])
    await show_servers_list(callback, db_user, db, page)


def register_handlers(dp: Dispatcher):
    
    dp.callback_query.register(show_servers_menu, F.data == "admin_servers")
    dp.callback_query.register(show_servers_list, F.data == "admin_servers_list")
    dp.callback_query.register(sync_servers_with_remnawave, F.data == "admin_servers_sync")
    dp.callback_query.register(sync_server_user_counts_handler, F.data == "admin_servers_sync_counts")
    dp.callback_query.register(show_server_detailed_stats, F.data == "admin_servers_stats")
    
    dp.callback_query.register(show_server_edit_menu, F.data.startswith("admin_server_edit_") & ~F.data.contains("name") & ~F.data.contains("price") & ~F.data.contains("country") & ~F.data.contains("limit") & ~F.data.contains("desc"))
    dp.callback_query.register(toggle_server_availability, F.data.startswith("admin_server_toggle_"))
    
    dp.callback_query.register(start_server_edit_name, F.data.startswith("admin_server_edit_name_"))
    dp.callback_query.register(start_server_edit_price, F.data.startswith("admin_server_edit_price_"))
    dp.callback_query.register(start_server_edit_country, F.data.startswith("admin_server_edit_country_"))      
    dp.callback_query.register(start_server_edit_limit, F.data.startswith("admin_server_edit_limit_"))         
    dp.callback_query.register(start_server_edit_description, F.data.startswith("admin_server_edit_desc_"))     
    
    dp.message.register(process_server_name_edit, AdminStates.editing_server_name)
    dp.message.register(process_server_price_edit, AdminStates.editing_server_price)
    dp.message.register(process_server_country_edit, AdminStates.editing_server_country)            
    dp.message.register(process_server_limit_edit, AdminStates.editing_server_limit)                
    dp.message.register(process_server_description_edit, AdminStates.editing_server_description)    
    
    dp.callback_query.register(delete_server_confirm, F.data.startswith("admin_server_delete_") & ~F.data.contains("confirm"))
    dp.callback_query.register(delete_server_execute, F.data.startswith("admin_server_delete_confirm_"))
    
    dp.callback_query.register(handle_servers_pagination, F.data.startswith("admin_servers_list_page_"))
