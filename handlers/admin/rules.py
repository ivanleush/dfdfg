import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.states import AdminStates
from app.database.models import User
from app.localization.texts import get_texts
from app.utils.decorators import admin_required, error_handler
from app.database.crud.rules import get_current_rules_content, create_or_update_rules

logger = logging.getLogger(__name__)


@admin_required
@error_handler
async def show_rules_management(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    text = """
üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞</b>

–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [types.InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="admin_edit_rules")],
        [types.InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∞–≤–∏–ª", callback_data="admin_view_rules")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def view_current_rules(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    current_rules = await get_current_rules_content(db, db_user.language)
    
    await callback.message.edit_text(
        f"üìã <b>–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞</b>\n\n{current_rules}",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_edit_rules")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rules")]
        ])
    )
    await callback.answer()


@admin_required
@error_handler
async def start_edit_rules(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    current_rules = await get_current_rules_content(db, db_user.language)
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:</b>\n{current_rules[:500]}{'...' if len(current_rules) > 500 else ''}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–∏—Å–∞.\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞</i>",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rules")]
        ])
    )
    
    await state.set_state(AdminStates.editing_rules_page)
    await callback.answer()


@admin_required
@error_handler
async def process_rules_edit(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    new_rules = message.text
    
    if len(new_rules) > 4000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await message.answer(
        f"üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª:</b>\n\n{new_rules}\n\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="admin_save_rules"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rules")
            ]
        ])
    )
    
    await state.update_data(new_rules=new_rules)


@admin_required
@error_handler
async def save_rules(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    new_rules = data.get('new_rules')
    
    if not new_rules:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        await create_or_update_rules(
            db=db,
            content=new_rules,
            language=db_user.language
        )
        
        from app.localization.texts import clear_rules_cache
        clear_rules_cache()
        
        from app.localization.texts import refresh_rules_cache
        await refresh_rules_cache(db_user.language)
        
        await callback.message.edit_text(
            "‚úÖ <b>–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            "–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "–ö–µ—à –ø—Ä–∞–≤–∏–ª –æ—á–∏—â–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üìã –ö –ø—Ä–∞–≤–∏–ª–∞–º", callback_data="admin_rules")]
            ])
        )
        
        await state.clear()
        logger.info(f"–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {db_user.telegram_id}")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª", show_alert=True)


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(show_rules_management, F.data == "admin_rules")
    dp.callback_query.register(view_current_rules, F.data == "admin_view_rules")
    dp.callback_query.register(start_edit_rules, F.data == "admin_edit_rules")
    dp.callback_query.register(save_rules, F.data == "admin_save_rules")
    
    dp.message.register(process_rules_edit, AdminStates.editing_rules_page)