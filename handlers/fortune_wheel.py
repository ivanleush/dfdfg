from aiogram import Router, F, types
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from app.database.database import get_db
from app.services.fortune_wheel_service import FortuneWheelService
from app.handlers.keyboards import get_fortune_wheel_keyboard
from sqlalchemy import select, func, Integer
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import FortuneWheelSpin

logger = logging.getLogger(__name__)
logger.info("–ú–æ–¥—É–ª—å fortune_wheel –∑–∞–≥—Ä—É–∂–µ–Ω")
router = Router() # ‚úÖ –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£


@router.callback_query(F.data == "fortune_wheel")
async def show_fortune_wheel(callback: types.CallbackQuery):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    await callback.message.edit_text(
        "üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã\n\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –¥–æ 50 —Ä—É–±–ª–µ–π!",
        reply_markup=get_fortune_wheel_keyboard()
    )


@router.callback_query(F.data == "spin_wheel")
async def spin_fortune_wheel(callback: types.CallbackQuery, db: AsyncSession):
    try:
        service = FortuneWheelService()
        result = await service.spin_wheel(db, callback.from_user, callback.message)

        if result["success"]:
            await callback.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ callback
            await callback.message.answer(
                result["message"]
            )
            # –£—Å–ø–µ—à–Ω–æ, –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫—Ä—É—Ç–∏–ª –∫–æ–ª–µ—Å–æ
            await callback.answer(result["message"], show_alert=True)
            # –ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ spin_fortune_wheel: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@router.callback_query(F.data == "wheel_stats")
async def show_wheel_stats(callback: types.CallbackQuery):
    try:
        async for db in get_db():
            service = FortuneWheelService()
            stats = await service.get_stats(db, callback.from_user.id)

        total_winnings_kopeks = stats.get('total_winnings', 0)
        total_winnings_rubles = total_winnings_kopeks / 100

        await callback.message.answer(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: {stats['total_spins']}\n"
            f"‚Ä¢ –ü–æ–±–µ–¥: {stats['wins']}\n"
            f"‚Ä¢ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total_winnings_rubles:.2f} ‚ÇΩ"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_wheel_stats: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")