import logging
from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession
from app.config import settings
from app.database.crud.user import get_user_by_telegram_id, add_user_balance
from app.database.models import User
from app.states import WithdrawStates
from app.keyboards.inline import get_balance_keyboard

logger = logging.getLogger(__name__)
router = Router()

MIN_WITHDRAW_AMOUNT = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö

@router.callback_query(F.data == "withdraw_start")
async def withdraw_start_handler(callback: types.CallbackQuery, state: FSMContext, db: AsyncSession, db_user: User):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–≤–µ—Å—Ç–∏'.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É.
    """
    balance_rub = db_user.balance_kopeks / 100

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ –≤—ã–≤–æ–¥–∞
    if balance_rub < MIN_WITHDRAW_AMOUNT:
        await callback.answer(f"‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç {MIN_WITHDRAW_AMOUNT} —Ä—É–±–ª–µ–π.", show_alert=True)
        return

    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")]
    ])
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance_rub:.2f} —Ä—É–±–ª–µ–π. \n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ (–Ω–µ –º–µ–Ω—å—à–µ {MIN_WITHDRAW_AMOUNT} —Ä—É–±–ª–µ–π):",
        reply_markup=keyboard
    )
    await state.set_state(WithdrawStates.get_amount)
    await callback.answer()


@router.message(WithdrawStates.get_amount)
async def process_amount(message: types.Message, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É.
    """
    balance_rub = db_user.balance_kopeks / 100

    try:
        amount_to_withdraw = float(message.text.replace(',', '.'))
        if amount_to_withdraw < MIN_WITHDRAW_AMOUNT:
            await message.answer(
                f"‚ùå –°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ {MIN_WITHDRAW_AMOUNT} —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É.")
            return
        if amount_to_withdraw > balance_rub:
            await message.answer(
                f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance_rub:.2f} —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É.")
            return

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ FSM –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    await state.update_data(amount_to_withdraw=amount_to_withdraw)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")]
    ])
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—ã–≤–æ–¥–∏–º {amount_to_withdraw:.2f} —Ä—É–±–ª–µ–π. \n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞\n\n"
        "–í–∞–∂–Ω–æ! –í–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–ë–∞–Ω–∫\n–†–µ–∫–≤–∏–∑–∏—Ç—ã\n\n–ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –±—É–¥—É—Ç –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        reply_markup=keyboard
    )
    await state.set_state(WithdrawStates.get_requisites)


@router.message(WithdrawStates.get_requisites)
async def process_requisites(message: types.Message, state: FSMContext, db: AsyncSession, db_user: User, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.
    """
    state_data = await state.get_data()
    amount_to_withdraw = state_data.get('amount_to_withdraw')
    requisites = message.text.strip()

    amount_kopeks = int(amount_to_withdraw * 100)

    success = await add_user_balance(db, db_user, -amount_kopeks, "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")

    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    await db.commit()

    username = message.from_user.username if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è HTML
    admin_message_text = (
        f"<b>üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n"
        f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{username} (ID: <code>{db_user.id}</code>)\n"
        f"<b>–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É:</b> {amount_to_withdraw:.2f} —Ä—É–±–ª–µ–π\n"
        f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> <code>{requisites}</code>"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                                 callback_data=f"withdraw_approve_{db_user.telegram_id}_{amount_to_withdraw}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                 callback_data=f"withdraw_decline_{db_user.telegram_id}_{amount_to_withdraw}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        chat_id=settings.ADMIN_IDS,
        text=admin_message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
        "–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞. "
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data == "cancel_withdraw")
async def cancel_withdraw(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.
    """
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_balance_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("withdraw_approve_"))
async def admin_approve_withdraw(callback: types.CallbackQuery, bot: Bot):
    """
    –ê–¥–º–∏–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥.
    """
    if str(callback.from_user.id) != settings.ADMIN_IDS:
        return await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

    _, _, telegram_id, amount_str = callback.data.split('_')
    telegram_id = int(telegram_id)  # ‚Üê —ç—Ç–æ Telegram ID, –∞ –Ω–µ ID –±–∞–∑—ã
    amount_to_withdraw = float(amount_str)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        chat_id=telegram_id,  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID
        text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount_to_withdraw:.2f} —Ä—É–±–ª–µ–π –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await callback.answer()


@router.callback_query(F.data.startswith("withdraw_decline_"))
async def admin_decline_withdraw(callback: types.CallbackQuery, db: AsyncSession, bot: Bot):
    """
    –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥.
    """
    if str(callback.from_user.id) != settings.ADMIN_IDS:
        return await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

    _, _, telegram_id, amount_str = callback.data.split('_')
    telegram_id = int(telegram_id)  # ‚Üê —ç—Ç–æ Telegram ID
    amount_to_return = float(amount_str)

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    from app.database.crud.user import get_user_by_telegram_id
    user = await get_user_by_telegram_id(db, telegram_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    amount_kopeks = int(amount_to_return * 100)
    success = await add_user_balance(db, user, amount_kopeks, "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞")

    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    await db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        chat_id=telegram_id,  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID
        text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount_to_return:.2f} —Ä—É–±–ª–µ–π –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    )

    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await callback.answer()