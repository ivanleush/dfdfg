import logging
from aiogram import Dispatcher, F, types, Bot, Router
from aiogram.enums import ParseMode
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.database.crud.tasks import get_active_tasks, get_task_by_id
from app.database.crud.task_completion import check_task_completion, create_task_completion
from app.database.crud.user import get_user_by_telegram_id, update_user_balance
from app.keyboards.inline import get_tasks_keyboard, get_main_menu_keyboard
from app.localization.texts import get_texts
from app.utils.decorators import error_handler
from app.services.tasks_service import TasksService
import html
from app.database.session import AsyncSessionLocal

logger = logging.getLogger(__name__)
router = Router()


def get_task_detail_keyboard(task_id: int, texts):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text=texts.CHECK_TASK_BUTTON,
            callback_data=f"check_task_{task_id}"
        )
    )
    builder.add(
        InlineKeyboardButton(
            text=texts.BACK_BUTTON,
            callback_data="tasks_menu"
        )
    )
    return builder.as_markup()


@router.callback_query(F.data == "tasks_menu")
async def tasks_menu_handler(callback: types.CallbackQuery, db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π"""
    texts = get_texts(callback.from_user.language_code)
    tasks = await get_active_tasks(db)
    user_id = callback.from_user.id

    if not tasks:
        await callback.message.edit_text(
            html.escape(texts.NO_TASKS_AVAILABLE),
            reply_markup=get_main_menu_keyboard(texts),
            parse_mode=ParseMode.HTML
        )
        return

    completed_tasks = {}
    for task in tasks:
        is_completed = await check_task_completion(db, user_id, task.id)
        completed_tasks[task.id] = is_completed

    builder = InlineKeyboardBuilder()
    for task in tasks:
        if completed_tasks[task.id]:
            button_text = f"‚úÖ {html.escape(task.title)}"
        else:
            button_text = f"{html.escape(task.title)} ({task.reward_kopeks / 100}‚ÇΩ)"

        builder.add(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"show_task_{task.id}"
            )
        )

    builder.add(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_menu"
        )
    )
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith("show_task_"))
async def show_single_task(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏."""
    try:
        async with AsyncSessionLocal() as db:
            texts = get_texts(callback.from_user.language_code)
            task_id = int(callback.data.split("_")[-1])
            task = await get_task_by_id(db, task_id)
            user_id = callback.from_user.id

            if not task:
                await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

            is_completed = await check_task_completion(db, user_id, task.id)
            if is_completed:
                await callback.answer("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!", show_alert=True)
                return

            reward = f"{task.reward_kopeks / 100:.2f}"

            channels_text = ""
            if task.channels:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º enumerate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∏ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–Ω–∞–ª–∞
                for i, channel in enumerate(task.channels):
                    channel_url = html.escape(channel.url)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É
                    channels_text += f'<a href="{channel_url}">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è {i + 1}</a>\n'

            message_text = (
                f"<b>–ó–∞–¥–∞–Ω–∏–µ: {html.escape(task.title)}</b>\n\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {html.escape(task.description)}\n\n"
                f"üí∞ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {reward} —Ä—É–±.\n\n"
                f"üîó <b>–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
                f"{channels_text}"
            )

            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(
                    text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚úÖ",
                    callback_data=f"check_task_{task.id}"
                )
            )
            builder.add(
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="tasks_menu"
                )
            )

            await callback.message.edit_text(
                message_text,
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            await callback.answer()

    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_single_task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("check_task_"))
async def check_task_completion_handler(callback: types.CallbackQuery, bot: Bot, db: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—ã–¥–∞–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ."""
    try:
        task_id = int(callback.data.split('_')[-1])
        user_id = callback.from_user.id
        texts = get_texts(callback.from_user.language_code)


        db_user = await get_user_by_telegram_id(db, user_id)
        if not db_user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        task = await get_task_by_id(db, task_id)
        print(f"DEBUG: Type of task.channels is: {type(task.channels)}")
        print(f"DEBUG: Value of task.channels is: {task.channels}")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ task —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        is_completed = await check_task_completion(db, user_id, task.id)
        if is_completed:
            await callback.answer("‚úÖ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!", show_alert=True)
            return

        tasks_service = TasksService()
        is_subscribed = await tasks_service.check_subscription_and_reward(bot, db, db_user, task)

        if is_subscribed:
            success_text = (
                f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ {task.reward_kopeks / 100}‚ÇΩ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å."
            )

            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                )
            )

            await callback.message.edit_text(
                html.escape(success_text),
                reply_markup=builder.as_markup(),  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                parse_mode=ParseMode.HTML
            )
        else:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback.answer(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∏—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                show_alert=True
            )

            builder = InlineKeyboardBuilder()
            builder.add(
                InlineKeyboardButton(
                    text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚úÖ",
                    callback_data=f"check_task_{task.id}"
                )
            )
            builder.add(
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="tasks_menu"
                )
            )

            await callback.message.edit_text(
                error_text,
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_task_completion_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

@router.callback_query(F.data == "back_to_tasks_list")
async def back_to_tasks_list_menu(callback: types.CallbackQuery, db: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π"""
    await tasks_menu_handler(callback, db)


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")