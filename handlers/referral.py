import logging
from aiogram import Dispatcher, types, F
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.inline import get_referral_keyboard, get_back_keyboard
from app.localization.texts import get_texts
from app.utils.user_utils import get_user_referral_summary, get_detailed_referral_list, get_referral_analytics

logger = logging.getLogger(__name__)


async def show_referral_info(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    
    summary = await get_user_referral_summary(db, db_user.id)
    
    bot_username = (await callback.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={db_user.referral_code}"
    
    referral_text = f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
    
    referral_text += f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    referral_text += f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{summary['invited_count']}</b>\n"
    referral_text += f"‚Ä¢ –°–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>{summary['paid_referrals_count']}</b>\n"
    referral_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{summary['active_referrals_count']}</b>\n"
    referral_text += f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: <b>{summary['conversion_rate']}%</b>\n"
    referral_text += f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: <b>{texts.format_price(summary['total_earned_kopeks'])}</b>\n"
    referral_text += f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: <b>{texts.format_price(summary['month_earned_kopeks'])}</b>\n\n"
    
    referral_text += f"üéÅ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã:</b>\n"
    referral_text += f"‚Ä¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç: <b>{texts.format_price(settings.REFERRAL_FIRST_TOPUP_BONUS_KOPEKS)}</b> –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç <b>{texts.format_price(settings.REFERRAL_MINIMUM_TOPUP_KOPEKS)}</b>\n"
    referral_text += f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <b>{texts.format_price(settings.REFERRAL_INVITER_BONUS_KOPEKS)}</b>\n"
    referral_text += f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <b>{settings.REFERRAL_COMMISSION_PERCENT}%</b>\n\n"
    
    referral_text += f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
    referral_text += f"<code>{referral_link}</code>\n\n"
    referral_text += f"üÜî <b>–í–∞—à –∫–æ–¥:</b> <code>{db_user.referral_code}</code>\n\n"
    
    if summary['recent_earnings']:
        meaningful_earnings = [
            earning for earning in summary['recent_earnings'][:5] 
            if earning['amount_kopeks'] > 0
        ]
        
        if meaningful_earnings:
            referral_text += f"üí∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</b>\n"
            for earning in meaningful_earnings[:3]: 
                reason_text = {
                    "referral_first_topup": "üéâ –ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    "referral_commission_topup": "üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", 
                    "referral_commission": "üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å –ø–æ–∫—É–ø–∫–∏"
                }.get(earning['reason'], earning['reason'])
                
                referral_text += f"‚Ä¢ {reason_text}: <b>{texts.format_price(earning['amount_kopeks'])}</b> –æ—Ç {earning['referral_name']}\n"
            referral_text += "\n"
    
    if summary['earnings_by_type']:
        referral_text += f"üìà <b>–î–æ—Ö–æ–¥—ã –ø–æ —Ç–∏–ø–∞–º:</b>\n"
        
        if 'referral_first_topup' in summary['earnings_by_type']:
            data = summary['earnings_by_type']['referral_first_topup']
            if data['total_amount_kopeks'] > 0:
                referral_text += f"‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –ø–µ—Ä–≤—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{data['count']}</b> ({texts.format_price(data['total_amount_kopeks'])})\n"
        
        if 'referral_commission_topup' in summary['earnings_by_type']:
            data = summary['earnings_by_type']['referral_commission_topup']
            if data['total_amount_kopeks'] > 0:
                referral_text += f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <b>{data['count']}</b> ({texts.format_price(data['total_amount_kopeks'])})\n"
        
        if 'referral_commission' in summary['earnings_by_type']:
            data = summary['earnings_by_type']['referral_commission']
            if data['total_amount_kopeks'] > 0:
                referral_text += f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ —Å –ø–æ–∫—É–ø–æ–∫: <b>{data['count']}</b> ({texts.format_price(data['total_amount_kopeks'])})\n"
        
        referral_text += "\n"
    
    referral_text += "üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!"
    
    await callback.message.edit_text(
        referral_text,
        reply_markup=get_referral_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()


async def show_detailed_referral_list(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    page: int = 1
):
    texts = get_texts(db_user.language)
    
    referrals_data = await get_detailed_referral_list(db, db_user.id, limit=10, offset=(page - 1) * 10)
    
    if not referrals_data['referrals']:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=texts.BACK, callback_data="menu_referrals")]
            ])
        )
        await callback.answer()
        return
    
    text = f"üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b> (—Å—Ç—Ä. {referrals_data['current_page']}/{referrals_data['total_pages']})\n\n"
    
    for i, referral in enumerate(referrals_data['referrals'], 1):
        status_emoji = "üü¢" if referral['status'] == 'active' else "üî¥"
        
        topup_emoji = "üí∞" if referral['has_made_first_topup'] else "‚è≥"
        
        text += f"{i}. {status_emoji} <b>{referral['full_name']}</b>\n"
        text += f"   {topup_emoji} –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {referral['topups_count']}\n"
        text += f"   üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –Ω–µ–≥–æ: {texts.format_price(referral['total_earned_kopeks'])}\n"
        text += f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {referral['days_since_registration']} –¥–Ω. –Ω–∞–∑–∞–¥\n"
        
        if referral['days_since_activity'] is not None:
            text += f"   üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {referral['days_since_activity']} –¥–Ω. –Ω–∞–∑–∞–¥\n"
        else:
            text += f"   üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –¥–∞–≤–Ω–æ\n"
        
        text += "\n"
    
    keyboard = []
    nav_buttons = []
    
    if referrals_data['has_prev']:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=f"referral_list_page_{page - 1}"
        ))
    
    if referrals_data['has_next']:
        nav_buttons.append(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
            callback_data=f"referral_list_page_{page + 1}"
        ))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([types.InlineKeyboardButton(
        text=texts.BACK, 
        callback_data="menu_referrals"
    )])
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()


async def show_referral_analytics(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    
    analytics = await get_referral_analytics(db, db_user.id)
    
    text = f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"
    
    text += f"üí∞ <b>–î–æ—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>\n"
    text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {texts.format_price(analytics['earnings_by_period']['today'])}\n"
    text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {texts.format_price(analytics['earnings_by_period']['week'])}\n"
    text += f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {texts.format_price(analytics['earnings_by_period']['month'])}\n"
    text += f"‚Ä¢ –ó–∞ –∫–≤–∞—Ä—Ç–∞–ª: {texts.format_price(analytics['earnings_by_period']['quarter'])}\n\n"
    
    if analytics['top_referrals']:
        text += f"üèÜ <b>–¢–æ–ø-{len(analytics['top_referrals'])} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n"
        for i, ref in enumerate(analytics['top_referrals'], 1):
            text += f"{i}. {ref['referral_name']}: {texts.format_price(ref['total_earned_kopeks'])} ({ref['earnings_count']} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π)\n"
        text += "\n"
    
    text += "üìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–µ—Ç—å!"
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=texts.BACK, callback_data="menu_referrals")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()


async def create_invite_message(
    callback: types.CallbackQuery,
    db_user: User
):
    texts = get_texts(db_user.language)
    
    bot_username = (await callback.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={db_user.referral_code}"
    
    invite_text = f"üéâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ VPN —Å–µ—Ä–≤–∏—Å—É!\n\n"
    invite_text += f"üíé –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç {texts.format_price(settings.REFERRAL_MINIMUM_TOPUP_KOPEKS)} —Ç—ã –ø–æ–ª—É—á–∏—à—å {texts.format_price(settings.REFERRAL_FIRST_TOPUP_BONUS_KOPEKS)} –±–æ–Ω—É—Å–æ–º –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n"
    invite_text += f"üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
    invite_text += f"üåç –°–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É\n"
    invite_text += f"üîí –ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞\n\n"
    invite_text += f"üëá –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n{referral_link}"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
            switch_inline_query=invite_text 
        )],
        [types.InlineKeyboardButton(
            text=texts.BACK,
            callback_data="menu_referrals"
        )]
    ])
    
    await callback.message.edit_text(
        f"üìù <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª—é–±–æ–π —á–∞—Ç, –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:\n\n"
        f"<code>{invite_text}</code>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


def register_handlers(dp: Dispatcher):
    
    dp.callback_query.register(
        show_referral_info,
        F.data == "menu_referrals"
    )
    
    dp.callback_query.register(
        create_invite_message,
        F.data == "referral_create_invite"
    )
    
    dp.callback_query.register(
        show_detailed_referral_list,
        F.data == "referral_list"
    )
    
    dp.callback_query.register(
        show_referral_analytics,
        F.data == "referral_analytics"
    )
    
    dp.callback_query.register(
        lambda callback, db_user, db: show_detailed_referral_list(
            callback, db_user, db, int(callback.data.split('_')[-1])
        ),
        F.data.startswith("referral_list_page_")
    )
